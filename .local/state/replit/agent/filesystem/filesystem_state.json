{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Document Management System\n\n## Overview\n\nThis is a full-stack document management system built for organizational compliance and document tracking. The application allows users to upload, manage, and track documents with deadline management, automated reminders, and administrative oversight. It features user authentication, role-based access control, file uploads with Firebase Storage, and email notifications.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **React SPA**: Built with React 18 using TypeScript and Vite for fast development\n- **UI Framework**: Shadcn/ui components with Radix UI primitives for accessibility\n- **Styling**: Tailwind CSS with custom design system and CSS variables\n- **State Management**: TanStack Query for server state, React Context for authentication\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Express.js Server**: RESTful API with TypeScript and ES modules\n- **Database Layer**: Drizzle ORM with PostgreSQL dialect for type-safe database operations\n- **File Storage**: Firebase Storage for document uploads with multipart handling\n- **Authentication**: Firebase Auth integration with custom user profiles\n- **Email Service**: Nodemailer for automated notifications and reminders\n- **Development Setup**: Vite middleware integration for seamless full-stack development\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Drizzle ORM for schema management\n- **File Storage**: Firebase Cloud Storage for document files\n- **Database Schema**: Five main entities - users, documents, deadlines, notifications, and reminders\n- **Session Management**: Session-based authentication with PostgreSQL session store\n- **Database Migrations**: Drizzle Kit for schema versioning and deployments\n\n### Authentication & Authorization\n- **Firebase Authentication**: Primary auth provider with email/password\n- **Role-Based Access**: User and admin roles with different permission levels\n- **Session Management**: Server-side session handling with connect-pg-simple\n- **Profile Integration**: Custom user profiles stored in PostgreSQL linked to Firebase UIDs\n- **Protected Routes**: Client-side route protection based on authentication state\n\n### External Dependencies\n- **Firebase Services**: \n  - Firebase Auth for user authentication\n  - Firebase Storage for file uploads and document storage\n  - Firebase Admin SDK for server-side operations\n- **Database**: \n  - PostgreSQL as primary database (configured for Neon serverless)\n  - Connection via @neondatabase/serverless driver\n- **Email Service**: \n  - Nodemailer for SMTP email delivery\n  - Configurable SMTP settings for notifications and reminders\n- **Development Tools**:\n  - Replit integration with cartographer and runtime error modal\n  - TypeScript for type safety across the stack\n  - ESBuild for production bundling","size_bytes":3004},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(10px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        slideIn: {\n          from: {\n            transform: \"translateX(-100%)\",\n          },\n          to: {\n            transform: \"translateX(0)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.3s ease-out\",\n        \"slide-in\": \"slideIn 0.3s ease-out\",\n      },\n      boxShadow: {\n        'card': '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',\n        'card-hover': '0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -2px rgb(0 0 0 / 0.05)',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3443},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { emailService } from \"./services/emailService\";\nimport { z } from \"zod\";\nimport { insertUserSchema, insertDocumentSchema, insertDeadlineSchema, insertNotificationSchema, insertReminderSchema } from \"@shared/schema\";\nimport multer from \"multer\";\n\n// Configure multer for file uploads (temporary storage)\nconst upload = multer({ \n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication & User routes\n  app.post('/api/users', async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/users/profile/:firebaseUid', async (req, res) => {\n    try {\n      const user = await storage.getUserByFirebaseUid(req.params.firebaseUid);\n      if (!user) {\n        return res.status(404).json({ message: 'User not found' });\n      }\n      res.json(user);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/users/stats/:userId', async (req, res) => {\n    try {\n      const stats = await storage.getUserStats(req.params.userId);\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/users/activity/:userId', async (req, res) => {\n    try {\n      const activity = await storage.getUserActivity(req.params.userId);\n      res.json(activity);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch('/api/users/notification-settings', async (req, res) => {\n    try {\n      // TODO: Implement notification settings update\n      res.json({ message: 'Settings updated successfully' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Document routes\n  app.post('/api/documents', upload.single('file'), async (req, res) => {\n    try {\n      const documentData = insertDocumentSchema.parse(req.body);\n      const document = await storage.createDocument(documentData);\n      \n      // Send notification\n      await emailService.sendDocumentUploadNotification(documentData.userId, document);\n      \n      res.json(document);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/documents/:userId', async (req, res) => {\n    try {\n      const { search, type, status, date } = req.query;\n      const documents = await storage.getUserDocuments(req.params.userId, {\n        search: search as string,\n        type: type as string,\n        status: status as string,\n        date: date as string,\n      });\n      res.json(documents);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/documents/recent/:userId', async (req, res) => {\n    try {\n      const documents = await storage.getUserDocuments(req.params.userId, { limit: 5 });\n      res.json(documents);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/documents/:documentId', async (req, res) => {\n    try {\n      await storage.deleteDocument(req.params.documentId);\n      res.json({ message: 'Document deleted successfully' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Deadline routes\n  app.post('/api/deadlines', async (req, res) => {\n    try {\n      const deadlineData = insertDeadlineSchema.parse(req.body);\n      const deadline = await storage.createDeadline(deadlineData);\n      res.json(deadline);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/deadlines/:userId', async (req, res) => {\n    try {\n      const deadlines = await storage.getUserDeadlines(req.params.userId);\n      res.json(deadlines);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/deadlines/upcoming/:userId', async (req, res) => {\n    try {\n      const deadlines = await storage.getUpcomingDeadlines(req.params.userId);\n      res.json(deadlines);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Notification routes\n  app.post('/api/notifications', async (req, res) => {\n    try {\n      const notificationData = insertNotificationSchema.parse(req.body);\n      const notification = await storage.createNotification(notificationData);\n      res.json(notification);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/notifications/:userId', async (req, res) => {\n    try {\n      const notifications = await storage.getUserNotifications(req.params.userId);\n      res.json(notifications);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.patch('/api/notifications/:notificationId/read', async (req, res) => {\n    try {\n      await storage.markNotificationAsRead(req.params.notificationId);\n      res.json({ message: 'Notification marked as read' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/notifications/:notificationId', async (req, res) => {\n    try {\n      await storage.deleteNotification(req.params.notificationId);\n      res.json({ message: 'Notification deleted successfully' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Admin routes\n  app.get('/api/admin/stats', async (req, res) => {\n    try {\n      const stats = await storage.getAdminStats();\n      res.json(stats);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/admin/compliance-by-department', async (req, res) => {\n    try {\n      const compliance = await storage.getComplianceByDepartment();\n      res.json(compliance);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/admin/document-types', async (req, res) => {\n    try {\n      const types = await storage.getDocumentTypeStats();\n      res.json(types);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/admin/users-status', async (req, res) => {\n    try {\n      const users = await storage.getUsersWithStatus();\n      res.json(users);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/admin/users', async (req, res) => {\n    try {\n      const { search, department } = req.query;\n      const users = await storage.getAllUsers({\n        search: search as string,\n        department: department as string,\n      });\n      res.json(users);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/admin/departments', async (req, res) => {\n    try {\n      const departments = await storage.getDepartments();\n      res.json(departments);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/admin/users', async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch('/api/admin/users/:userId', async (req, res) => {\n    try {\n      const updates = req.body;\n      const user = await storage.updateUser(req.params.userId, updates);\n      res.json(user);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/admin/users/:userId', async (req, res) => {\n    try {\n      await storage.deleteUser(req.params.userId);\n      res.json({ message: 'User deleted successfully' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  // Reminder routes\n  app.get('/api/admin/reminders', async (req, res) => {\n    try {\n      const reminders = await storage.getAllReminders();\n      res.json(reminders);\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/admin/reminders', async (req, res) => {\n    try {\n      const reminderData = insertReminderSchema.parse(req.body);\n      const reminder = await storage.createReminder(reminderData);\n      res.json(reminder);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.patch('/api/admin/reminders/:reminderId', async (req, res) => {\n    try {\n      const updates = req.body;\n      const reminder = await storage.updateReminder(req.params.reminderId, updates);\n      res.json(reminder);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message });\n    }\n  });\n\n  app.delete('/api/admin/reminders/:reminderId', async (req, res) => {\n    try {\n      await storage.deleteReminder(req.params.reminderId);\n      res.json({ message: 'Reminder deleted successfully' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.post('/api/admin/reminders/:reminderId/send', async (req, res) => {\n    try {\n      const reminder = await storage.getReminder(req.params.reminderId);\n      if (!reminder) {\n        return res.status(404).json({ message: 'Reminder not found' });\n      }\n\n      // Get the associated deadline and send reminder notifications\n      const deadline = await storage.getDeadline(reminder.deadlineId);\n      if (!deadline) {\n        return res.status(404).json({ message: 'Associated deadline not found' });\n      }\n      await emailService.sendReminderNotification(reminder, deadline);\n      \n      res.json({ message: 'Reminder sent successfully' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  app.get('/api/admin/export/compliance-report', async (req, res) => {\n    try {\n      // TODO: Generate and export compliance report\n      res.json({ message: 'Report export feature coming soon' });\n    } catch (error: any) {\n      res.status(500).json({ message: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":10627},"server/storage.ts":{"content":"import { type User, type InsertUser, type Document, type InsertDocument, type Deadline, type InsertDeadline, type Notification, type InsertNotification, type Reminder, type InsertReminder } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  deleteUser(id: string): Promise<void>;\n  getAllUsers(filters?: { search?: string; department?: string }): Promise<User[]>;\n  getDepartments(): Promise<string[]>;\n  getUserStats(userId: string): Promise<any>;\n  getUserActivity(userId: string): Promise<any[]>;\n  getUsersWithStatus(): Promise<any[]>;\n  getAdminStats(): Promise<any>;\n  getComplianceByDepartment(): Promise<any[]>;\n\n  // Document methods\n  createDocument(document: InsertDocument): Promise<Document>;\n  getUserDocuments(userId: string, filters?: any): Promise<Document[]>;\n  deleteDocument(id: string): Promise<void>;\n  getDocumentTypeStats(): Promise<any[]>;\n\n  // Deadline methods\n  createDeadline(deadline: InsertDeadline): Promise<Deadline>;\n  getUserDeadlines(userId: string): Promise<Deadline[]>;\n  getUpcomingDeadlines(userId: string): Promise<Deadline[]>;\n\n  // Notification methods\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getUserNotifications(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(id: string): Promise<void>;\n  deleteNotification(id: string): Promise<void>;\n\n  // Reminder methods\n  createReminder(reminder: InsertReminder): Promise<Reminder>;\n  getAllReminders(): Promise<Reminder[]>;\n  getReminder(id: string): Promise<Reminder | undefined>;\n  updateReminder(id: string, updates: Partial<Reminder>): Promise<Reminder>;\n  deleteReminder(id: string): Promise<void>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private documents: Map<string, Document>;\n  private deadlines: Map<string, Deadline>;\n  private notifications: Map<string, Notification>;\n  private reminders: Map<string, Reminder>;\n\n  constructor() {\n    this.users = new Map();\n    this.documents = new Map();\n    this.deadlines = new Map();\n    this.notifications = new Map();\n    this.reminders = new Map();\n\n    // Initialize with some sample data for demonstration\n    this.initializeSampleData();\n  }\n\n  private initializeSampleData() {\n    // Create sample admin user\n    const adminUser: User = {\n      id: randomUUID(),\n      email: \"admin@documentflow.com\",\n      firstName: \"Admin\",\n      lastName: \"User\",\n      phone: \"+52 55 1234 5678\",\n      department: \"IT\",\n      role: \"admin\",\n      firebaseUid: \"admin-firebase-uid\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(adminUser.id, adminUser);\n\n    // Create sample regular user\n    const regularUser: User = {\n      id: randomUUID(),\n      email: \"user@documentflow.com\",\n      firstName: \"Juan\",\n      lastName: \"Pérez\",\n      phone: \"+52 55 8765 4321\",\n      department: \"Recursos Humanos\",\n      role: \"user\",\n      firebaseUid: \"user-firebase-uid\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(regularUser.id, regularUser);\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.email === username,\n    );\n  }\n\n  async getUserByFirebaseUid(firebaseUid: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.firebaseUid === firebaseUid,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id, \n      createdAt: new Date(), \n      updatedAt: new Date() \n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) throw new Error('User not found');\n    \n    const updatedUser = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updatedUser);\n    return updatedUser;\n  }\n\n  async deleteUser(id: string): Promise<void> {\n    this.users.delete(id);\n  }\n\n  async getAllUsers(filters?: { search?: string; department?: string }): Promise<User[]> {\n    let users = Array.from(this.users.values());\n    \n    if (filters?.search) {\n      const search = filters.search.toLowerCase();\n      users = users.filter(user => \n        user.firstName.toLowerCase().includes(search) ||\n        user.lastName.toLowerCase().includes(search) ||\n        user.email.toLowerCase().includes(search)\n      );\n    }\n    \n    if (filters?.department && filters.department !== 'all') {\n      users = users.filter(user => user.department === filters.department);\n    }\n    \n    return users;\n  }\n\n  async getDepartments(): Promise<string[]> {\n    const departments = new Set(Array.from(this.users.values()).map(user => user.department));\n    return Array.from(departments);\n  }\n\n  async getUserStats(userId: string): Promise<any> {\n    const userDocuments = Array.from(this.documents.values()).filter(doc => doc.userId === userId);\n    const userDeadlines = Array.from(this.deadlines.values()).filter(d => d.userId === userId || d.isGlobal);\n    \n    return {\n      uploaded: userDocuments.filter(doc => doc.status === 'processed').length,\n      pending: userDocuments.filter(doc => doc.status === 'pending').length,\n      upcoming: userDeadlines.filter(d => {\n        const dueDate = new Date(d.dueDate);\n        const now = new Date();\n        const daysLeft = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n        return daysLeft <= 7 && daysLeft >= 0;\n      }).length,\n      compliance: userDocuments.length > 0 ? Math.round((userDocuments.filter(doc => doc.status === 'processed').length / userDocuments.length) * 100) : 0,\n    };\n  }\n\n  async getUserActivity(userId: string): Promise<any[]> {\n    const userDocuments = Array.from(this.documents.values())\n      .filter(doc => doc.userId === userId)\n      .sort((a, b) => new Date(b.uploadedAt).getTime() - new Date(a.uploadedAt).getTime())\n      .slice(0, 5);\n    \n    return userDocuments.map(doc => ({\n      type: 'upload',\n      title: `${doc.originalName} subido`,\n      createdAt: doc.uploadedAt,\n    }));\n  }\n\n  async getUsersWithStatus(): Promise<any[]> {\n    const users = Array.from(this.users.values());\n    return users.map(user => {\n      const userDocs = Array.from(this.documents.values()).filter(doc => doc.userId === user.id);\n      const processedDocs = userDocs.filter(doc => doc.status === 'processed').length;\n      const totalRequired = 10; // Assuming 10 required documents\n      \n      return {\n        ...user,\n        documentsUploaded: processedDocs,\n        documentsRequired: totalRequired,\n        status: processedDocs === totalRequired ? 'complete' : processedDocs > 0 ? 'incomplete' : 'pending',\n        lastActivity: userDocs.length > 0 ? userDocs[userDocs.length - 1].uploadedAt : null,\n      };\n    });\n  }\n\n  async getAdminStats(): Promise<any> {\n    const totalUsers = this.users.size;\n    const totalDocuments = this.documents.size;\n    const processedDocs = Array.from(this.documents.values()).filter(doc => doc.status === 'processed').length;\n    const compliance = totalDocuments > 0 ? Math.round((processedDocs / totalDocuments) * 100) : 0;\n    \n    return {\n      totalUsers,\n      newUsersThisMonth: Math.floor(totalUsers * 0.1), // Mock 10% new this month\n      totalDocuments,\n      newDocumentsThisWeek: Math.floor(totalDocuments * 0.05), // Mock 5% new this week\n      compliance,\n      complianceChange: Math.floor(Math.random() * 10 - 5), // Mock change\n      overdue: Math.floor(totalDocuments * 0.02), // Mock 2% overdue\n    };\n  }\n\n  async getComplianceByDepartment(): Promise<any[]> {\n    const departments = await this.getDepartments();\n    return departments.map(dept => {\n      const deptUsers = Array.from(this.users.values()).filter(user => user.department === dept);\n      const deptDocs = deptUsers.flatMap(user => \n        Array.from(this.documents.values()).filter(doc => doc.userId === user.id)\n      );\n      const processedDocs = deptDocs.filter(doc => doc.status === 'processed').length;\n      const percentage = deptDocs.length > 0 ? Math.round((processedDocs / deptDocs.length) * 100) : 0;\n      \n      return {\n        name: dept,\n        percentage,\n      };\n    });\n  }\n\n  // Document methods\n  async createDocument(insertDocument: InsertDocument): Promise<Document> {\n    const id = randomUUID();\n    const document: Document = {\n      ...insertDocument,\n      id,\n      uploadedAt: new Date(),\n      processedAt: null,\n    };\n    this.documents.set(id, document);\n    return document;\n  }\n\n  async getUserDocuments(userId: string, filters?: any): Promise<Document[]> {\n    let documents = Array.from(this.documents.values()).filter(doc => doc.userId === userId);\n    \n    if (filters?.search) {\n      const search = filters.search.toLowerCase();\n      documents = documents.filter(doc => \n        doc.originalName.toLowerCase().includes(search) ||\n        doc.documentType.toLowerCase().includes(search)\n      );\n    }\n    \n    if (filters?.type && filters.type !== 'all') {\n      documents = documents.filter(doc => doc.documentType === filters.type);\n    }\n    \n    if (filters?.status && filters.status !== 'all') {\n      documents = documents.filter(doc => doc.status === filters.status);\n    }\n    \n    if (filters?.date) {\n      documents = documents.filter(doc => \n        new Date(doc.uploadedAt).toISOString().split('T')[0] === filters.date\n      );\n    }\n    \n    if (filters?.limit) {\n      documents = documents.slice(0, filters.limit);\n    }\n    \n    return documents.sort((a, b) => new Date(b.uploadedAt).getTime() - new Date(a.uploadedAt).getTime());\n  }\n\n  async deleteDocument(id: string): Promise<void> {\n    this.documents.delete(id);\n  }\n\n  async getDocumentTypeStats(): Promise<any[]> {\n    const types = new Map<string, number>();\n    Array.from(this.documents.values()).forEach(doc => {\n      const current = types.get(doc.documentType) || 0;\n      types.set(doc.documentType, current + 1);\n    });\n    \n    return Array.from(types.entries()).map(([name, count]) => ({ name, count }))\n      .sort((a, b) => b.count - a.count);\n  }\n\n  // Deadline methods\n  async createDeadline(insertDeadline: InsertDeadline): Promise<Deadline> {\n    const id = randomUUID();\n    const deadline: Deadline = {\n      ...insertDeadline,\n      id,\n      createdAt: new Date(),\n    };\n    this.deadlines.set(id, deadline);\n    return deadline;\n  }\n\n  async getUserDeadlines(userId: string): Promise<Deadline[]> {\n    return Array.from(this.deadlines.values())\n      .filter(deadline => deadline.userId === userId || deadline.isGlobal)\n      .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime());\n  }\n\n  async getUpcomingDeadlines(userId: string): Promise<Deadline[]> {\n    const now = new Date();\n    const futureDate = new Date();\n    futureDate.setDate(now.getDate() + 30); // Next 30 days\n    \n    return Array.from(this.deadlines.values())\n      .filter(deadline => {\n        const dueDate = new Date(deadline.dueDate);\n        return (deadline.userId === userId || deadline.isGlobal) &&\n               dueDate >= now && dueDate <= futureDate;\n      })\n      .sort((a, b) => new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime())\n      .slice(0, 5);\n  }\n\n  // Notification methods\n  async createNotification(insertNotification: InsertNotification): Promise<Notification> {\n    const id = randomUUID();\n    const notification: Notification = {\n      ...insertNotification,\n      id,\n      sentAt: new Date(),\n    };\n    this.notifications.set(id, notification);\n    return notification;\n  }\n\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return Array.from(this.notifications.values())\n      .filter(notification => notification.userId === userId)\n      .sort((a, b) => new Date(b.sentAt).getTime() - new Date(a.sentAt).getTime());\n  }\n\n  async markNotificationAsRead(id: string): Promise<void> {\n    const notification = this.notifications.get(id);\n    if (notification) {\n      notification.isRead = true;\n      this.notifications.set(id, notification);\n    }\n  }\n\n  async deleteNotification(id: string): Promise<void> {\n    this.notifications.delete(id);\n  }\n\n  // Reminder methods\n  async createReminder(insertReminder: InsertReminder): Promise<Reminder> {\n    const id = randomUUID();\n    const reminder: Reminder = {\n      ...insertReminder,\n      id,\n      createdAt: new Date(),\n    };\n    this.reminders.set(id, reminder);\n    return reminder;\n  }\n\n  async getAllReminders(): Promise<Reminder[]> {\n    return Array.from(this.reminders.values())\n      .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());\n  }\n\n  async getReminder(id: string): Promise<Reminder | undefined> {\n    return this.reminders.get(id);\n  }\n\n  async updateReminder(id: string, updates: Partial<Reminder>): Promise<Reminder> {\n    const reminder = this.reminders.get(id);\n    if (!reminder) throw new Error('Reminder not found');\n    \n    const updatedReminder = { ...reminder, ...updates };\n    this.reminders.set(id, updatedReminder);\n    return updatedReminder;\n  }\n\n  async deleteReminder(id: string): Promise<void> {\n    this.reminders.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":13798},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, json } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  phone: text(\"phone\"),\n  department: text(\"department\").notNull(),\n  role: text(\"role\").notNull().default(\"user\"), // \"user\" | \"admin\"\n  firebaseUid: text(\"firebase_uid\").unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const documents = pgTable(\"documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  filename: text(\"filename\").notNull(),\n  originalName: text(\"original_name\").notNull(),\n  fileType: text(\"file_type\").notNull(), // pdf, image, video\n  documentType: text(\"document_type\").notNull(), // identification, address_proof, etc\n  fileSize: integer(\"file_size\").notNull(),\n  storageUrl: text(\"storage_url\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, processed, rejected\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow(),\n  processedAt: timestamp(\"processed_at\"),\n});\n\nexport const deadlines = pgTable(\"deadlines\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  documentType: text(\"document_type\").notNull(),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  dueDate: timestamp(\"due_date\").notNull(),\n  isGlobal: boolean(\"is_global\").default(false), // applies to all users if true\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  type: text(\"type\").notNull(), // reminder, deadline, upload_success, etc\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n  scheduledFor: timestamp(\"scheduled_for\"),\n});\n\nexport const reminders = pgTable(\"reminders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  deadlineId: varchar(\"deadline_id\").notNull().references(() => deadlines.id),\n  userId: varchar(\"user_id\").references(() => users.id),\n  reminderType: text(\"reminder_type\").notNull(), // email, sms, push\n  reminderTime: timestamp(\"reminder_time\").notNull(), // when to send\n  isSent: boolean(\"is_sent\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertDocumentSchema = createInsertSchema(documents).omit({\n  id: true,\n  uploadedAt: true,\n  processedAt: true,\n});\n\nexport const insertDeadlineSchema = createInsertSchema(deadlines).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  sentAt: true,\n});\n\nexport const insertReminderSchema = createInsertSchema(reminders).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Document = typeof documents.$inferSelect;\nexport type InsertDocument = z.infer<typeof insertDocumentSchema>;\nexport type Deadline = typeof deadlines.$inferSelect;\nexport type InsertDeadline = z.infer<typeof insertDeadlineSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\nexport type Reminder = typeof reminders.$inferSelect;\nexport type InsertReminder = z.infer<typeof insertReminderSchema>;\n","size_bytes":4112},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider, useAuth } from \"@/hooks/useAuth\";\nimport AuthModal from \"@/components/AuthModal\";\nimport Layout from \"@/components/Layout\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport Upload from \"@/pages/Upload\";\nimport Documents from \"@/pages/Documents\";\nimport Deadlines from \"@/pages/Deadlines\";\nimport Notifications from \"@/pages/Notifications\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport UserManagement from \"@/pages/UserManagement\";\nimport Reminders from \"@/pages/Reminders\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AuthenticatedApp() {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\"></div>\n          </div>\n          <p className=\"text-gray-600\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <AuthModal />;\n  }\n\n  return (\n    <Layout>\n      <Switch>\n        <Route path=\"/\" component={Dashboard} />\n        <Route path=\"/upload\" component={Upload} />\n        <Route path=\"/documents\" component={Documents} />\n        <Route path=\"/deadlines\" component={Deadlines} />\n        <Route path=\"/notifications\" component={Notifications} />\n        <Route path=\"/admin\" component={AdminDashboard} />\n        <Route path=\"/admin/users\" component={UserManagement} />\n        <Route path=\"/admin/reminders\" component={Reminders} />\n        <Route component={NotFound} />\n      </Switch>\n    </Layout>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <TooltipProvider>\n          <Toaster />\n          <AuthenticatedApp />\n        </TooltipProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2276},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 100%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(180 6.6667% 97.0588%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(159 74% 36%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(211.5789 51.3514% 92.7451%);\n  --accent-foreground: hsl(217 91% 60%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(217 91% 60%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(159 74% 36%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(180 6.6667% 97.0588%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(217 91% 60%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05), 0px 1px 3px 0px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 10px 10px -5px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(217 91% 60%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(195.0000 15.3846% 94.9020%);\n  --secondary-foreground: hsl(210 25% 7.8431%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(205.7143 70% 7.8431%);\n  --accent-foreground: hsl(217 91% 60%);\n  --destructive: hsl(0 84% 60%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(217 91% 60%);\n  --chart-1: hsl(217 91% 60%);\n  --chart-2: hsl(159 74% 36%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(217 91% 60%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(217 91% 60%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(217 91% 60%);\n  --font-sans: Inter, system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.75rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.05);\n  --shadow-sm: 0px 1px 2px 0px hsl(0 0% 0% / 0.05), 0px 1px 3px 0px hsl(0 0% 0% / 0.1);\n  --shadow: 0px 1px 3px 0px hsl(0 0% 0% / 0.1), 0px 1px 2px 0px hsl(0 0% 0% / 0.06);\n  --shadow-md: 0px 4px 6px -1px hsl(0 0% 0% / 0.1), 0px 2px 4px -1px hsl(0 0% 0% / 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0 0% 0% / 0.1), 0px 4px 6px -2px hsl(0 0% 0% / 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0 0% 0% / 0.1), 0px 10px 10px -5px hsl(0 0% 0% / 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0 0% 0% / 0.25);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n  \n  /* Custom scrollbar */\n  ::-webkit-scrollbar {\n    @apply w-2 h-2;\n  }\n  \n  ::-webkit-scrollbar-track {\n    @apply bg-gray-100 rounded-full;\n  }\n  \n  ::-webkit-scrollbar-thumb {\n    @apply bg-gray-300 rounded-full hover:bg-gray-400;\n  }\n}\n\n/* Utility classes for the design */\n.gradient-bg {\n  background: linear-gradient(135deg, hsl(217 91% 60%) 0%, hsl(159 74% 36%) 100%);\n}\n\n/* Animation for loading states */\n@keyframes pulse {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: .5;\n  }\n}\n\n.animate-pulse {\n  animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n}\n\n/* Custom focus states */\n.focus-ring {\n  @apply focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2;\n}\n\n/* File upload drag states */\n.drag-over {\n  @apply border-primary bg-blue-50;\n}\n\n/* Status indicator styles */\n.status-dot {\n  @apply inline-block w-2 h-2 rounded-full mr-2;\n}\n\n.status-success {\n  @apply bg-green-500;\n}\n\n.status-warning {\n  @apply bg-orange-500;\n}\n\n.status-error {\n  @apply bg-red-500;\n}\n\n.status-info {\n  @apply bg-blue-500;\n}\n\n/* Card hover effects */\n.card-hover {\n  @apply transition-all duration-200 hover:shadow-lg hover:-translate-y-1;\n}\n\n/* Button variants */\n.btn-gradient {\n  background: linear-gradient(135deg, hsl(217 91% 60%) 0%, hsl(159 74% 36%) 100%);\n  @apply text-white border-0 hover:opacity-90 transition-opacity;\n}\n","size_bytes":5676},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/emailService.ts":{"content":"import nodemailer from 'nodemailer';\nimport { User, Document, Reminder, Deadline } from '@shared/schema';\n\nexport class EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor() {\n    // Configure nodemailer with environment variables\n    this.transporter = nodemailer.createTransport({\n      host: process.env.SMTP_HOST || 'smtp.gmail.com',\n      port: parseInt(process.env.SMTP_PORT || '587'),\n      secure: false, // true for 465, false for other ports\n      auth: {\n        user: process.env.SMTP_USER || process.env.EMAIL_USER,\n        pass: process.env.SMTP_PASS || process.env.EMAIL_PASS,\n      },\n    });\n  }\n\n  async sendDocumentUploadNotification(userId: string, document: Document): Promise<void> {\n    try {\n      // In a real implementation, you would fetch user details from database\n      const mailOptions = {\n        from: process.env.FROM_EMAIL || 'noreply@documentflow.com',\n        to: 'user@example.com', // Would be fetched from user data\n        subject: 'Documento subido exitosamente - DocumentFlow',\n        html: this.getDocumentUploadTemplate(document),\n      };\n\n      await this.transporter.sendMail(mailOptions);\n      console.log('Document upload notification sent successfully');\n    } catch (error) {\n      console.error('Error sending document upload notification:', error);\n      throw error;\n    }\n  }\n\n  async sendReminderNotification(reminder: Reminder, deadline: Deadline): Promise<void> {\n    try {\n      // In a real implementation, you would determine recipients based on deadline settings\n      const recipients = deadline.isGlobal \n        ? ['all-users@example.com'] // Would fetch all user emails\n        : ['specific-user@example.com']; // Would fetch specific user emails\n\n      for (const recipient of recipients) {\n        const mailOptions = {\n          from: process.env.FROM_EMAIL || 'noreply@documentflow.com',\n          to: recipient,\n          subject: `Recordatorio: ${deadline.title} - DocumentFlow`,\n          html: this.getReminderTemplate(reminder, deadline),\n        };\n\n        await this.transporter.sendMail(mailOptions);\n      }\n\n      console.log('Reminder notifications sent successfully');\n    } catch (error) {\n      console.error('Error sending reminder notifications:', error);\n      throw error;\n    }\n  }\n\n  async sendDeadlineNotification(userId: string, deadline: any): Promise<void> {\n    try {\n      const mailOptions = {\n        from: process.env.FROM_EMAIL || 'noreply@documentflow.com',\n        to: 'user@example.com', // Would be fetched from user data\n        subject: `Fecha límite próxima: ${deadline.title} - DocumentFlow`,\n        html: this.getDeadlineTemplate(deadline),\n      };\n\n      await this.transporter.sendMail(mailOptions);\n      console.log('Deadline notification sent successfully');\n    } catch (error) {\n      console.error('Error sending deadline notification:', error);\n      throw error;\n    }\n  }\n\n  private getDocumentUploadTemplate(document: Document): string {\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n          <meta charset=\"utf-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Documento Subido - DocumentFlow</title>\n          <style>\n              body { font-family: 'Inter', Arial, sans-serif; line-height: 1.6; color: #333; }\n              .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n              .header { background: linear-gradient(135deg, #2563eb 0%, #059669 100%); color: white; padding: 30px; border-radius: 8px 8px 0 0; text-align: center; }\n              .content { background: white; padding: 30px; border: 1px solid #e5e7eb; }\n              .footer { background: #f9fafb; padding: 20px; border-radius: 0 0 8px 8px; text-align: center; font-size: 14px; color: #6b7280; }\n              .button { display: inline-block; background: #2563eb; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n              .document-info { background: #f3f4f6; padding: 20px; border-radius: 6px; margin: 20px 0; }\n          </style>\n      </head>\n      <body>\n          <div class=\"container\">\n              <div class=\"header\">\n                  <h1>🎉 Documento Subido Exitosamente</h1>\n              </div>\n              <div class=\"content\">\n                  <p>¡Hola!</p>\n                  <p>Te confirmamos que tu documento ha sido subido exitosamente a DocumentFlow.</p>\n                  \n                  <div class=\"document-info\">\n                      <h3>Detalles del documento:</h3>\n                      <p><strong>Nombre:</strong> ${document.originalName}</p>\n                      <p><strong>Tipo:</strong> ${document.documentType}</p>\n                      <p><strong>Tamaño:</strong> ${(document.fileSize / (1024 * 1024)).toFixed(2)} MB</p>\n                      <p><strong>Estado:</strong> ${document.status === 'pending' ? 'Pendiente de revisión' : 'Procesado'}</p>\n                  </div>\n                  \n                  <p>Tu documento está siendo procesado y recibirás una notificación cuando esté listo.</p>\n                  \n                  <a href=\"${process.env.APP_URL || 'http://localhost:5000'}/documents\" class=\"button\">Ver mis documentos</a>\n              </div>\n              <div class=\"footer\">\n                  <p>DocumentFlow - Sistema de gestión de archivos inteligente</p>\n                  <p>Este es un correo automático, por favor no responder.</p>\n              </div>\n          </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private getReminderTemplate(reminder: Reminder, deadline: Deadline): string {\n    const dueDate = new Date(reminder.reminderTime);\n    const formattedDate = dueDate.toLocaleDateString('es-ES', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n          <meta charset=\"utf-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Recordatorio - DocumentFlow</title>\n          <style>\n              body { font-family: 'Inter', Arial, sans-serif; line-height: 1.6; color: #333; }\n              .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n              .header { background: linear-gradient(135deg, #f59e0b 0%, #dc2626 100%); color: white; padding: 30px; border-radius: 8px 8px 0 0; text-align: center; }\n              .content { background: white; padding: 30px; border: 1px solid #e5e7eb; }\n              .footer { background: #f9fafb; padding: 20px; border-radius: 0 0 8px 8px; text-align: center; font-size: 14px; color: #6b7280; }\n              .button { display: inline-block; background: #dc2626; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n              .reminder-info { background: #fef3c7; border-left: 4px solid #f59e0b; padding: 20px; margin: 20px 0; }\n              .urgent { background: #fee2e2; border-left-color: #dc2626; }\n          </style>\n      </head>\n      <body>\n          <div class=\"container\">\n              <div class=\"header\">\n                  <h1>⏰ Recordatorio Importante</h1>\n              </div>\n              <div class=\"content\">\n                  <p>¡Hola!</p>\n                  <p>Te recordamos que tienes una fecha límite próxima para subir documentos.</p>\n                  \n                  <div class=\"reminder-info\">\n                      <h3>${deadline.title}</h3>\n                      <p><strong>Fecha límite:</strong> ${formattedDate}</p>\n                      <p><strong>Descripción:</strong> ${deadline.description || 'No hay descripción adicional'}</p>\n                  </div>\n                  \n                  <p><strong>¡No olvides subir tus documentos antes de la fecha límite!</strong></p>\n                  <p>Puedes subir tus archivos directamente desde nuestro sitio web o usar la función de cámara para capturar documentos desde tu dispositivo móvil.</p>\n                  \n                  <a href=\"${process.env.APP_URL || 'http://localhost:5000'}/upload\" class=\"button\">Subir documentos ahora</a>\n              </div>\n              <div class=\"footer\">\n                  <p>DocumentFlow - Sistema de gestión de archivos inteligente</p>\n                  <p>Este es un correo automático, por favor no responder.</p>\n              </div>\n          </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private getDeadlineTemplate(deadline: any): string {\n    const dueDate = new Date(deadline.dueDate);\n    const formattedDate = dueDate.toLocaleDateString('es-ES', {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    });\n\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n          <meta charset=\"utf-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Fecha Límite Próxima - DocumentFlow</title>\n          <style>\n              body { font-family: 'Inter', Arial, sans-serif; line-height: 1.6; color: #333; }\n              .container { max-width: 600px; margin: 0 auto; padding: 20px; }\n              .header { background: linear-gradient(135deg, #dc2626 0%, #7c2d12 100%); color: white; padding: 30px; border-radius: 8px 8px 0 0; text-align: center; }\n              .content { background: white; padding: 30px; border: 1px solid #e5e7eb; }\n              .footer { background: #f9fafb; padding: 20px; border-radius: 0 0 8px 8px; text-align: center; font-size: 14px; color: #6b7280; }\n              .button { display: inline-block; background: #dc2626; color: white; padding: 12px 24px; text-decoration: none; border-radius: 6px; margin: 20px 0; }\n              .deadline-info { background: #fee2e2; border-left: 4px solid #dc2626; padding: 20px; margin: 20px 0; }\n          </style>\n      </head>\n      <body>\n          <div class=\"container\">\n              <div class=\"header\">\n                  <h1>🚨 Fecha Límite Próxima</h1>\n              </div>\n              <div class=\"content\">\n                  <p>¡Atención!</p>\n                  <p>Se acerca la fecha límite para subir los siguientes documentos:</p>\n                  \n                  <div class=\"deadline-info\">\n                      <h3>${deadline.title}</h3>\n                      <p><strong>Fecha límite:</strong> ${formattedDate}</p>\n                      <p><strong>Descripción:</strong> ${deadline.description}</p>\n                  </div>\n                  \n                  <p><strong>¡Es importante que subas tus documentos antes de la fecha límite!</strong></p>\n                  <p>Evita retrasos y asegúrate de completar tu documentación a tiempo.</p>\n                  \n                  <a href=\"${process.env.APP_URL || 'http://localhost:5000'}/upload\" class=\"button\">Subir documentos ahora</a>\n              </div>\n              <div class=\"footer\">\n                  <p>DocumentFlow - Sistema de gestión de archivos inteligente</p>\n                  <p>Este es un correo automático, por favor no responder.</p>\n              </div>\n          </div>\n      </body>\n      </html>\n    `;\n  }\n}\n\nexport const emailService = new EmailService();\n","size_bytes":11156},"server/services/firebaseAdmin.ts":{"content":"import admin from 'firebase-admin';\nimport { getFirestore } from 'firebase-admin/firestore';\nimport { getStorage } from 'firebase-admin/storage';\n\n// Initialize Firebase Admin SDK\nif (!admin.apps.length) {\n  // For production, use service account key\n  if (process.env.FIREBASE_SERVICE_ACCOUNT) {\n    const serviceAccount = JSON.parse(process.env.FIREBASE_SERVICE_ACCOUNT);\n    admin.initializeApp({\n      credential: admin.credential.cert(serviceAccount),\n      projectId: process.env.FIREBASE_PROJECT_ID,\n      storageBucket: `${process.env.FIREBASE_PROJECT_ID}.appspot.com`,\n    });\n  } else {\n    // For development, you can use application default credentials\n    admin.initializeApp({\n      projectId: process.env.FIREBASE_PROJECT_ID,\n      storageBucket: `${process.env.FIREBASE_PROJECT_ID}.appspot.com`,\n    });\n  }\n}\n\nexport const adminAuth = admin.auth();\nexport const adminFirestore = getFirestore();\nexport const adminStorage = getStorage();\n\nexport class FirebaseAdminService {\n  async verifyToken(idToken: string) {\n    try {\n      const decodedToken = await adminAuth.verifyIdToken(idToken);\n      return decodedToken;\n    } catch (error) {\n      console.error('Error verifying Firebase token:', error);\n      throw error;\n    }\n  }\n\n  async createCustomToken(uid: string) {\n    try {\n      const customToken = await adminAuth.createCustomToken(uid);\n      return customToken;\n    } catch (error) {\n      console.error('Error creating custom token:', error);\n      throw error;\n    }\n  }\n\n  async createUser(userData: {\n    email: string;\n    password: string;\n    displayName: string;\n  }) {\n    try {\n      const userRecord = await adminAuth.createUser({\n        email: userData.email,\n        password: userData.password,\n        displayName: userData.displayName,\n      });\n      return userRecord;\n    } catch (error) {\n      console.error('Error creating Firebase user:', error);\n      throw error;\n    }\n  }\n\n  async updateUser(uid: string, userData: any) {\n    try {\n      const userRecord = await adminAuth.updateUser(uid, userData);\n      return userRecord;\n    } catch (error) {\n      console.error('Error updating Firebase user:', error);\n      throw error;\n    }\n  }\n\n  async deleteUser(uid: string) {\n    try {\n      await adminAuth.deleteUser(uid);\n    } catch (error) {\n      console.error('Error deleting Firebase user:', error);\n      throw error;\n    }\n  }\n\n  async saveDocumentMetadata(documentId: string, metadata: any) {\n    try {\n      await adminFirestore.collection('documents').doc(documentId).set({\n        ...metadata,\n        createdAt: admin.firestore.FieldValue.serverTimestamp(),\n        updatedAt: admin.firestore.FieldValue.serverTimestamp(),\n      });\n    } catch (error) {\n      console.error('Error saving document metadata:', error);\n      throw error;\n    }\n  }\n\n  async getDocumentMetadata(documentId: string) {\n    try {\n      const doc = await adminFirestore.collection('documents').doc(documentId).get();\n      return doc.exists ? doc.data() : null;\n    } catch (error) {\n      console.error('Error getting document metadata:', error);\n      throw error;\n    }\n  }\n\n  async getUserDocuments(userId: string) {\n    try {\n      const snapshot = await adminFirestore\n        .collection('documents')\n        .where('userId', '==', userId)\n        .orderBy('createdAt', 'desc')\n        .get();\n      \n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n    } catch (error) {\n      console.error('Error getting user documents:', error);\n      throw error;\n    }\n  }\n\n  async createDeadline(deadlineData: any) {\n    try {\n      const docRef = await adminFirestore.collection('deadlines').add({\n        ...deadlineData,\n        createdAt: admin.firestore.FieldValue.serverTimestamp(),\n      });\n      return docRef.id;\n    } catch (error) {\n      console.error('Error creating deadline:', error);\n      throw error;\n    }\n  }\n\n  async getDeadlines(userId?: string) {\n    try {\n      let query = adminFirestore.collection('deadlines') as any;\n      \n      if (userId) {\n        query = query.where('userId', '==', userId);\n      }\n      \n      const snapshot = await query.orderBy('dueDate', 'asc').get();\n      \n      return snapshot.docs.map((doc: any) => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n    } catch (error) {\n      console.error('Error getting deadlines:', error);\n      throw error;\n    }\n  }\n\n  async createNotification(notificationData: any) {\n    try {\n      const docRef = await adminFirestore.collection('notifications').add({\n        ...notificationData,\n        createdAt: admin.firestore.FieldValue.serverTimestamp(),\n        isRead: false,\n      });\n      return docRef.id;\n    } catch (error) {\n      console.error('Error creating notification:', error);\n      throw error;\n    }\n  }\n\n  async getUserNotifications(userId: string) {\n    try {\n      const snapshot = await adminFirestore\n        .collection('notifications')\n        .where('userId', '==', userId)\n        .orderBy('createdAt', 'desc')\n        .get();\n      \n      return snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data(),\n      }));\n    } catch (error) {\n      console.error('Error getting user notifications:', error);\n      throw error;\n    }\n  }\n\n  async markNotificationAsRead(notificationId: string) {\n    try {\n      await adminFirestore.collection('notifications').doc(notificationId).update({\n        isRead: true,\n        readAt: admin.firestore.FieldValue.serverTimestamp(),\n      });\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      throw error;\n    }\n  }\n\n  async uploadFile(buffer: Buffer, filename: string, metadata?: any) {\n    try {\n      const bucket = adminStorage.bucket();\n      const file = bucket.file(`documents/${filename}`);\n      \n      const stream = file.createWriteStream({\n        metadata: {\n          contentType: metadata?.contentType || 'application/octet-stream',\n          metadata: metadata?.customMetadata || {},\n        },\n      });\n\n      return new Promise((resolve, reject) => {\n        stream.on('error', reject);\n        stream.on('finish', async () => {\n          try {\n            await file.makePublic();\n            const publicUrl = `https://storage.googleapis.com/${bucket.name}/${file.name}`;\n            resolve(publicUrl);\n          } catch (error) {\n            reject(error);\n          }\n        });\n        stream.end(buffer);\n      });\n    } catch (error) {\n      console.error('Error uploading file:', error);\n      throw error;\n    }\n  }\n\n  async deleteFile(filename: string) {\n    try {\n      const bucket = adminStorage.bucket();\n      await bucket.file(`documents/${filename}`).delete();\n    } catch (error) {\n      console.error('Error deleting file:', error);\n      throw error;\n    }\n  }\n}\n\nexport const firebaseAdminService = new FirebaseAdminService();\n","size_bytes":6882},"client/src/components/AuthModal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { CloudUpload } from \"lucide-react\";\n\nexport default function AuthModal() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [loading, setLoading] = useState(false);\n  const { login, register } = useAuth();\n  const { toast } = useToast();\n\n  const [loginData, setLoginData] = useState({\n    email: \"\",\n    password: \"\"\n  });\n\n  const [registerData, setRegisterData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    department: \"\",\n    password: \"\"\n  });\n\n  const handleLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      await login(loginData.email, loginData.password);\n      toast({ title: \"Inicio de sesión exitoso\" });\n    } catch (error: any) {\n      toast({ \n        title: \"Error de inicio de sesión\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRegister = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n    try {\n      await register(registerData);\n      toast({ title: \"Cuenta creada exitosamente\" });\n    } catch (error: any) {\n      toast({ \n        title: \"Error al crear cuenta\", \n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\" data-testid=\"auth-modal\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardHeader className=\"text-center\">\n          <div className=\"w-16 h-16 bg-primary rounded-2xl flex items-center justify-center mx-auto mb-4\">\n            <CloudUpload className=\"text-white text-2xl\" />\n          </div>\n          <CardTitle className=\"text-2xl\">DocumentFlow</CardTitle>\n          <CardDescription>Sistema de gestión de archivos inteligente</CardDescription>\n        </CardHeader>\n\n        <CardContent>\n          {isLogin ? (\n            <form onSubmit={handleLogin} className=\"space-y-6\" data-testid=\"login-form\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"usuario@empresa.com\"\n                  value={loginData.email}\n                  onChange={(e) => setLoginData({...loginData, email: e.target.value})}\n                  required\n                  data-testid=\"input-login-email\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"password\">Contraseña</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={loginData.password}\n                  onChange={(e) => setLoginData({...loginData, password: e.target.value})}\n                  required\n                  data-testid=\"input-login-password\"\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={loading}\n                data-testid=\"button-login\"\n              >\n                {loading ? \"Iniciando sesión...\" : \"Iniciar Sesión\"}\n              </Button>\n            </form>\n          ) : (\n            <form onSubmit={handleRegister} className=\"space-y-4\" data-testid=\"register-form\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"firstName\">Nombre</Label>\n                  <Input\n                    id=\"firstName\"\n                    placeholder=\"Juan\"\n                    value={registerData.firstName}\n                    onChange={(e) => setRegisterData({...registerData, firstName: e.target.value})}\n                    required\n                    data-testid=\"input-firstName\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"lastName\">Apellido</Label>\n                  <Input\n                    id=\"lastName\"\n                    placeholder=\"Pérez\"\n                    value={registerData.lastName}\n                    onChange={(e) => setRegisterData({...registerData, lastName: e.target.value})}\n                    required\n                    data-testid=\"input-lastName\"\n                  />\n                </div>\n              </div>\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  placeholder=\"juan.perez@empresa.com\"\n                  value={registerData.email}\n                  onChange={(e) => setRegisterData({...registerData, email: e.target.value})}\n                  required\n                  data-testid=\"input-register-email\"\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"phone\">Teléfono</Label>\n                <Input\n                  id=\"phone\"\n                  type=\"tel\"\n                  placeholder=\"+52 55 1234 5678\"\n                  value={registerData.phone}\n                  onChange={(e) => setRegisterData({...registerData, phone: e.target.value})}\n                  data-testid=\"input-phone\"\n                />\n              </div>\n              <div>\n                <Label>Departamento</Label>\n                <Select onValueChange={(value) => setRegisterData({...registerData, department: value})}>\n                  <SelectTrigger data-testid=\"select-department\">\n                    <SelectValue placeholder=\"Seleccionar departamento\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"Recursos Humanos\">Recursos Humanos</SelectItem>\n                    <SelectItem value=\"Finanzas\">Finanzas</SelectItem>\n                    <SelectItem value=\"IT\">IT</SelectItem>\n                    <SelectItem value=\"Marketing\">Marketing</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n              <div>\n                <Label htmlFor=\"registerPassword\">Contraseña</Label>\n                <Input\n                  id=\"registerPassword\"\n                  type=\"password\"\n                  placeholder=\"••••••••\"\n                  value={registerData.password}\n                  onChange={(e) => setRegisterData({...registerData, password: e.target.value})}\n                  required\n                  data-testid=\"input-register-password\"\n                />\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={loading}\n                data-testid=\"button-register\"\n              >\n                {loading ? \"Creando cuenta...\" : \"Crear Cuenta\"}\n              </Button>\n            </form>\n          )}\n\n          <div className=\"mt-6 text-center\">\n            <Button\n              variant=\"link\"\n              onClick={() => setIsLogin(!isLogin)}\n              data-testid=\"button-toggle-auth\"\n            >\n              {isLogin ? \"¿No tienes cuenta? Regístrate\" : \"¿Ya tienes cuenta? Inicia sesión\"}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7753},"client/src/components/CameraCapture.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Camera, Circle, StopCircle, Lightbulb } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function CameraCapture() {\n  const [stream, setStream] = useState<MediaStream | null>(null);\n  const [isActive, setIsActive] = useState(false);\n  const [capturedImage, setCapturedImage] = useState<string | null>(null);\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const { toast } = useToast();\n\n  const startCamera = async () => {\n    try {\n      const mediaStream = await navigator.mediaDevices.getUserMedia({ \n        video: { facingMode: 'environment' } // Use back camera on mobile\n      });\n      setStream(mediaStream);\n      setIsActive(true);\n      \n      if (videoRef.current) {\n        videoRef.current.srcObject = mediaStream;\n      }\n    } catch (error) {\n      console.error('Error accessing camera:', error);\n      toast({\n        title: \"Error de cámara\",\n        description: \"No se pudo acceder a la cámara. Verifica los permisos.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const stopCamera = () => {\n    if (stream) {\n      stream.getTracks().forEach(track => track.stop());\n      setStream(null);\n      setIsActive(false);\n    }\n  };\n\n  const capturePhoto = () => {\n    if (!videoRef.current || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const video = videoRef.current;\n    const context = canvas.getContext('2d');\n    \n    if (!context) return;\n\n    // Set canvas dimensions to match video\n    canvas.width = video.videoWidth;\n    canvas.height = video.videoHeight;\n    \n    // Draw video frame to canvas\n    context.drawImage(video, 0, 0, canvas.width, canvas.height);\n    \n    // Convert to data URL\n    const dataURL = canvas.toDataURL('image/jpeg', 0.8);\n    setCapturedImage(dataURL);\n    \n    toast({\n      title: \"Foto capturada\",\n      description: \"La foto se ha capturado exitosamente.\"\n    });\n  };\n\n  const retakePhoto = () => {\n    setCapturedImage(null);\n  };\n\n  const savePhoto = async () => {\n    if (!capturedImage) return;\n\n    try {\n      // Convert data URL to blob\n      const response = await fetch(capturedImage);\n      const blob = await response.blob();\n      \n      // Create file from blob\n      const file = new File([blob], `capture-${Date.now()}.jpg`, { type: 'image/jpeg' });\n      \n      // Here you would integrate with the file upload system\n      // For now, we'll just show a success message\n      toast({\n        title: \"Foto guardada\",\n        description: \"La foto se ha guardado correctamente.\"\n      });\n      \n      setCapturedImage(null);\n      \n    } catch (error) {\n      console.error('Error saving photo:', error);\n      toast({\n        title: \"Error\",\n        description: \"No se pudo guardar la foto.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  useEffect(() => {\n    return () => {\n      stopCamera(); // Cleanup on unmount\n    };\n  }, []);\n\n  return (\n    <Card data-testid=\"camera-capture-card\">\n      <CardHeader>\n        <CardTitle>Capturar con Cámara</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Camera Preview */}\n        <div className=\"bg-gray-900 rounded-xl overflow-hidden relative\" style={{ aspectRatio: '4/3' }}>\n          {isActive && !capturedImage ? (\n            <video\n              ref={videoRef}\n              autoPlay\n              muted\n              playsInline\n              className=\"w-full h-full object-cover\"\n              data-testid=\"camera-preview\"\n            />\n          ) : capturedImage ? (\n            <img\n              src={capturedImage}\n              alt=\"Captured\"\n              className=\"w-full h-full object-cover\"\n              data-testid=\"captured-image\"\n            />\n          ) : (\n            <div className=\"flex items-center justify-center h-full bg-gray-100\">\n              <div className=\"text-center\">\n                <Camera className=\"text-gray-400 h-16 w-16 mx-auto mb-4\" />\n                <p className=\"text-gray-600\">Haz clic para activar la cámara</p>\n              </div>\n            </div>\n          )}\n          \n          <canvas ref={canvasRef} className=\"hidden\" />\n        </div>\n\n        {/* Camera Controls */}\n        <div className=\"flex space-x-4\">\n          {!isActive && !capturedImage ? (\n            <Button \n              onClick={startCamera} \n              className=\"flex-1\"\n              data-testid=\"start-camera\"\n            >\n              <Camera className=\"mr-2 h-4 w-4\" />\n              Activar Cámara\n            </Button>\n          ) : isActive && !capturedImage ? (\n            <>\n              <Button \n                onClick={capturePhoto}\n                className=\"flex-1 bg-secondary hover:bg-green-700\"\n                data-testid=\"capture-photo\"\n              >\n                <Circle className=\"mr-2 h-4 w-4\" />\n                Capturar\n              </Button>\n              <Button \n                onClick={stopCamera}\n                variant=\"outline\"\n                data-testid=\"stop-camera\"\n              >\n                <StopCircle className=\"mr-2 h-4 w-4\" />\n                Detener\n              </Button>\n            </>\n          ) : capturedImage ? (\n            <>\n              <Button \n                onClick={retakePhoto}\n                variant=\"outline\"\n                className=\"flex-1\"\n                data-testid=\"retake-photo\"\n              >\n                Rehacer\n              </Button>\n              <Button \n                onClick={savePhoto}\n                className=\"flex-1 bg-secondary hover:bg-green-700\"\n                data-testid=\"save-photo\"\n              >\n                Guardar\n              </Button>\n            </>\n          ) : null}\n        </div>\n\n        {/* Capture Tips */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-xl p-4\">\n          <h4 className=\"font-medium text-blue-900 mb-2 flex items-center\">\n            <Lightbulb className=\"mr-2 h-4 w-4\" />\n            Consejos para mejor captura\n          </h4>\n          <ul className=\"text-sm text-blue-700 space-y-1\">\n            <li>• Asegúrate de tener buena iluminación</li>\n            <li>• Mantén el documento plano y completo en el encuadre</li>\n            <li>• Evita sombras y reflejos</li>\n            <li>• Mantén la cámara estable</li>\n          </ul>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6612},"client/src/components/DocumentCard.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { FileText, Image, Video, Eye, Download, Trash2 } from \"lucide-react\";\nimport { Document } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { format } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\ninterface DocumentCardProps {\n  document: Document;\n  onDelete?: (id: string) => void;\n}\n\nexport default function DocumentCard({ document, onDelete }: DocumentCardProps) {\n  const { toast } = useToast();\n\n  const getFileIcon = (fileType: string) => {\n    switch (fileType) {\n      case 'pdf':\n        return <FileText className=\"text-red-500 h-8 w-8\" />;\n      case 'image':\n        return <Image className=\"text-green-500 h-8 w-8\" />;\n      case 'video':\n        return <Video className=\"text-blue-500 h-8 w-8\" />;\n      default:\n        return <FileText className=\"text-gray-500 h-8 w-8\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'processed':\n        return 'bg-green-100 text-green-700';\n      case 'pending':\n        return 'bg-orange-100 text-orange-700';\n      case 'rejected':\n        return 'bg-red-100 text-red-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'processed':\n        return 'Procesado';\n      case 'pending':\n        return 'Pendiente';\n      case 'rejected':\n        return 'Rechazado';\n      default:\n        return status;\n    }\n  };\n\n  const getDocumentTypeText = (type: string) => {\n    const types = {\n      'identification': 'Identificación Oficial',\n      'address_proof': 'Comprobante de Domicilio',\n      'education_certificate': 'Certificado de Estudios',\n      'work_contract': 'Contrato de Trabajo',\n      'rfc': 'RFC',\n      'curp': 'CURP',\n      'other': 'Otros'\n    };\n    return types[type as keyof typeof types] || type;\n  };\n\n  const handleView = () => {\n    if (document.storageUrl) {\n      window.open(document.storageUrl, '_blank');\n    } else {\n      toast({\n        title: \"Error\",\n        description: \"No se puede abrir el documento.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleDownload = async () => {\n    if (!document.storageUrl) {\n      toast({\n        title: \"Error\",\n        description: \"No se puede descargar el documento.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    try {\n      const response = await fetch(document.storageUrl);\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.style.display = 'none';\n      a.href = url;\n      a.download = document.originalName;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      \n      toast({\n        title: \"Descarga iniciada\",\n        description: \"El archivo se está descargando.\"\n      });\n    } catch (error) {\n      toast({\n        title: \"Error de descarga\",\n        description: \"No se pudo descargar el archivo.\",\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const handleDelete = () => {\n    if (onDelete) {\n      onDelete(document.id);\n    }\n  };\n\n  return (\n    <Card className=\"overflow-hidden\" data-testid={`document-card-${document.id}`}>\n      {/* Document Preview */}\n      <div className=\"aspect-video bg-gray-100 flex items-center justify-center\">\n        {getFileIcon(document.fileType)}\n      </div>\n      \n      {/* Document Info */}\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-2\">\n          <h3 className=\"font-medium text-gray-900 text-sm truncate flex-1\" title={document.originalName}>\n            {document.originalName}\n          </h3>\n          <Badge className={`ml-2 text-xs ${getStatusColor(document.status)}`}>\n            {getStatusText(document.status)}\n          </Badge>\n        </div>\n        \n        <p className=\"text-xs text-gray-600 mb-2\">\n          {getDocumentTypeText(document.documentType)}\n        </p>\n        \n        <p className=\"text-xs text-gray-500 mb-3\">\n          Subido: {format(new Date(document.uploadedAt), \"dd MMM yyyy, HH:mm\", { locale: es })}\n        </p>\n        \n        <p className=\"text-xs text-gray-500 mb-3\">\n          Tamaño: {(document.fileSize / (1024 * 1024)).toFixed(1)} MB\n        </p>\n        \n        {/* Actions */}\n        <div className=\"flex space-x-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"flex-1 text-xs\"\n            onClick={handleView}\n            data-testid=\"view-document\"\n          >\n            <Eye className=\"mr-1 h-3 w-3\" />\n            Ver\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"flex-1 text-xs\"\n            onClick={handleDownload}\n            data-testid=\"download-document\"\n          >\n            <Download className=\"mr-1 h-3 w-3\" />\n            Descargar\n          </Button>\n          {onDelete && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"text-red-700 hover:bg-red-50 text-xs\"\n              onClick={handleDelete}\n              data-testid=\"delete-document\"\n            >\n              <Trash2 className=\"h-3 w-3\" />\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5508},"client/src/components/FileUpload.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CloudUpload } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ref, uploadBytes, getDownloadURL } from \"firebase/storage\";\nimport { storage } from \"@/lib/firebase\";\n\nconst ALLOWED_TYPES = {\n  'application/pdf': 'pdf',\n  'image/jpeg': 'image',\n  'image/png': 'image', \n  'image/gif': 'image',\n  'video/mp4': 'video',\n  'video/quicktime': 'video'\n};\n\nconst MAX_FILE_SIZE = 10 * 1024 * 1024; // 10MB\n\nexport default function FileUpload() {\n  const [selectedFiles, setSelectedFiles] = useState<File[]>([]);\n  const [documentType, setDocumentType] = useState(\"\");\n  const [uploading, setUploading] = useState(false);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [isDragOver, setIsDragOver] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { userData } = useAuth();\n  const { toast } = useToast();\n\n  const validateFile = (file: File): boolean => {\n    if (!ALLOWED_TYPES[file.type as keyof typeof ALLOWED_TYPES]) {\n      toast({\n        title: \"Tipo de archivo no permitido\",\n        description: `El archivo ${file.name} no es de un tipo permitido.`,\n        variant: \"destructive\"\n      });\n      return false;\n    }\n\n    if (file.size > MAX_FILE_SIZE) {\n      toast({\n        title: \"Archivo demasiado grande\",\n        description: `El archivo ${file.name} excede el tamaño máximo de 10MB.`,\n        variant: \"destructive\"\n      });\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleFileSelect = (files: FileList | null) => {\n    if (!files) return;\n\n    const validFiles = Array.from(files).filter(validateFile);\n    setSelectedFiles(prev => [...prev, ...validFiles]);\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    handleFileSelect(e.dataTransfer.files);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const uploadFiles = async () => {\n    if (!userData || selectedFiles.length === 0 || !documentType) {\n      toast({\n        title: \"Error\",\n        description: \"Por favor selecciona archivos y tipo de documento.\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setUploading(true);\n    setUploadProgress(0);\n\n    try {\n      const uploadPromises = selectedFiles.map(async (file, index) => {\n        // Upload to Firebase Storage\n        const timestamp = Date.now();\n        const filename = `${userData.id}/${timestamp}-${file.name}`;\n        const storageRef = ref(storage, `documents/${filename}`);\n        \n        const snapshot = await uploadBytes(storageRef, file);\n        const downloadURL = await getDownloadURL(snapshot.ref);\n\n        // Save to database via API\n        const response = await fetch('/api/documents', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify({\n            userId: userData.id,\n            filename: filename,\n            originalName: file.name,\n            fileType: ALLOWED_TYPES[file.type as keyof typeof ALLOWED_TYPES],\n            documentType: documentType,\n            fileSize: file.size,\n            storageUrl: downloadURL,\n          }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`Failed to save document ${file.name}`);\n        }\n\n        // Update progress\n        setUploadProgress(((index + 1) / selectedFiles.length) * 100);\n        \n        return response.json();\n      });\n\n      await Promise.all(uploadPromises);\n\n      toast({\n        title: \"Éxito\",\n        description: `${selectedFiles.length} archivo(s) subidos correctamente.`,\n      });\n\n      // Reset form\n      setSelectedFiles([]);\n      setDocumentType(\"\");\n      if (fileInputRef.current) {\n        fileInputRef.current.value = \"\";\n      }\n\n    } catch (error: any) {\n      console.error('Upload error:', error);\n      toast({\n        title: \"Error de subida\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    } finally {\n      setUploading(false);\n      setUploadProgress(0);\n    }\n  };\n\n  const removeFile = (index: number) => {\n    setSelectedFiles(prev => prev.filter((_, i) => i !== index));\n  };\n\n  return (\n    <Card data-testid=\"file-upload-card\">\n      <CardHeader>\n        <CardTitle>Subir desde Dispositivo</CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-6\">\n        {/* Drag & Drop Zone */}\n        <div\n          className={`border-2 border-dashed rounded-xl p-8 text-center transition-colors cursor-pointer ${\n            isDragOver ? 'border-primary bg-blue-50' : 'border-gray-300'\n          }`}\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          onClick={() => fileInputRef.current?.click()}\n          data-testid=\"drop-zone\"\n        >\n          <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <CloudUpload className=\"text-gray-400 h-8 w-8\" />\n          </div>\n          <h4 className=\"text-lg font-medium text-gray-900 mb-2\">\n            Arrastra tus archivos aquí\n          </h4>\n          <p className=\"text-gray-600 mb-4\">o haz clic para seleccionar</p>\n          <input\n            ref={fileInputRef}\n            type=\"file\"\n            multiple\n            accept=\".pdf,.jpg,.jpeg,.png,.gif,.mp4,.mov\"\n            className=\"hidden\"\n            onChange={(e) => handleFileSelect(e.target.files)}\n            data-testid=\"file-input\"\n          />\n          <Button type=\"button\" data-testid=\"select-files-button\">\n            Seleccionar Archivos\n          </Button>\n          <div className=\"mt-4 text-xs text-gray-500\">\n            Formatos: PDF, JPG, PNG, GIF, MP4 • Tamaño máximo: 10MB\n          </div>\n        </div>\n\n        {/* Selected Files */}\n        {selectedFiles.length > 0 && (\n          <div className=\"space-y-2\">\n            <Label>Archivos Seleccionados:</Label>\n            {selectedFiles.map((file, index) => (\n              <div key={index} className=\"flex items-center justify-between p-2 bg-gray-50 rounded-lg\">\n                <span className=\"text-sm font-medium truncate\">{file.name}</span>\n                <div className=\"flex items-center space-x-2\">\n                  <span className=\"text-xs text-gray-600\">\n                    {(file.size / (1024 * 1024)).toFixed(1)} MB\n                  </span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => removeFile(index)}\n                    data-testid={`remove-file-${index}`}\n                  >\n                    ×\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Document Type Selection */}\n        <div>\n          <Label>Tipo de Documento</Label>\n          <Select value={documentType} onValueChange={setDocumentType}>\n            <SelectTrigger data-testid=\"document-type-select\">\n              <SelectValue placeholder=\"Seleccionar tipo...\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"identification\">Identificación Oficial</SelectItem>\n              <SelectItem value=\"address_proof\">Comprobante de Domicilio</SelectItem>\n              <SelectItem value=\"education_certificate\">Certificado de Estudios</SelectItem>\n              <SelectItem value=\"work_contract\">Contrato de Trabajo</SelectItem>\n              <SelectItem value=\"rfc\">RFC</SelectItem>\n              <SelectItem value=\"curp\">CURP</SelectItem>\n              <SelectItem value=\"other\">Otros</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Upload Progress */}\n        {uploading && (\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm font-medium text-gray-700\">\n                Subiendo archivos...\n              </span>\n              <span className=\"text-sm text-gray-600\">{Math.round(uploadProgress)}%</span>\n            </div>\n            <Progress value={uploadProgress} className=\"w-full\" data-testid=\"upload-progress\" />\n          </div>\n        )}\n\n        {/* Upload Button */}\n        <Button\n          onClick={uploadFiles}\n          disabled={selectedFiles.length === 0 || !documentType || uploading}\n          className=\"w-full\"\n          data-testid=\"upload-button\"\n        >\n          {uploading ? \"Subiendo...\" : `Subir ${selectedFiles.length} archivo(s)`}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9174},"client/src/components/Layout.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarContent, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  CloudUpload, \n  LayoutDashboard, \n  Upload, \n  FolderOpen, \n  Calendar, \n  Bell,\n  BarChart3,\n  Users,\n  Clock,\n  Menu,\n  LogOut\n} from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { cn } from \"@/lib/utils\";\n\ninterface LayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function Layout({ children }: LayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [location] = useLocation();\n  const { userData, logout } = useAuth();\n\n  const isAdmin = userData?.role === \"admin\";\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n    { name: \"Subir Archivos\", href: \"/upload\", icon: Upload },\n    { name: \"Mis Documentos\", href: \"/documents\", icon: FolderOpen },\n    { name: \"Fechas Límite\", href: \"/deadlines\", icon: Calendar },\n    { name: \"Notificaciones\", href: \"/notifications\", icon: Bell },\n  ];\n\n  const adminNavigation = [\n    { name: \"Estadísticas\", href: \"/admin\", icon: BarChart3 },\n    { name: \"Gestión de Usuarios\", href: \"/admin/users\", icon: Users },\n    { name: \"Recordatorios\", href: \"/admin/reminders\", icon: Clock },\n  ];\n\n  const handleLogout = async () => {\n    await logout();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40\">\n        <div className=\"px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                className=\"lg:hidden\"\n                onClick={() => setSidebarOpen(!sidebarOpen)}\n                data-testid=\"toggle-sidebar\"\n              >\n                <Menu className=\"h-5 w-5\" />\n              </Button>\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                  <CloudUpload className=\"text-white text-sm\" />\n                </div>\n                <h1 className=\"text-xl font-bold text-gray-900\">DocumentFlow</h1>\n              </div>\n            </div>\n            \n            {/* User Profile */}\n            <div className=\"flex items-center space-x-4\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                <Bell className=\"h-5 w-5\" />\n                <span className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs rounded-full flex items-center justify-center\">\n                  3\n                </span>\n              </Button>\n              <div className=\"flex items-center space-x-3\">\n                <Avatar>\n                  <AvatarFallback className=\"bg-gradient-to-r from-primary to-secondary text-white\">\n                    {userData ? `${userData.firstName[0]}${userData.lastName[0]}` : \"U\"}\n                  </AvatarFallback>\n                </Avatar>\n                <div className=\"hidden md:block\">\n                  <p className=\"text-sm font-medium text-gray-900\">\n                    {userData ? `${userData.firstName} ${userData.lastName}` : \"Usuario\"}\n                  </p>\n                  <p className=\"text-xs text-gray-600\">{userData?.role || \"Usuario\"}</p>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" onClick={handleLogout} data-testid=\"button-logout\">\n                  <LogOut className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex\">\n        {/* Sidebar */}\n        <aside className={cn(\n          \"fixed lg:static inset-y-0 left-0 transform transition-transform duration-300 ease-in-out w-64 bg-white shadow-lg z-30 mt-0\",\n          sidebarOpen ? \"translate-x-0\" : \"-translate-x-full lg:translate-x-0\"\n        )}>\n          <nav className=\"h-full px-4 py-6 space-y-2\">\n            {navigation.map((item) => {\n              const Icon = item.icon;\n              return (\n                <Link key={item.name} href={item.href}>\n                  <a className={cn(\n                    \"flex items-center space-x-3 px-4 py-3 rounded-xl transition-colors\",\n                    location === item.href \n                      ? \"bg-primary text-white\" \n                      : \"text-gray-700 hover:bg-gray-100\"\n                  )} data-testid={`nav-${item.href}`}>\n                    <Icon className=\"h-5 w-5\" />\n                    <span className=\"font-medium\">{item.name}</span>\n                  </a>\n                </Link>\n              );\n            })}\n            \n            {/* Admin Only */}\n            {isAdmin && (\n              <div className=\"pt-4 border-t border-gray-200\">\n                <p className=\"px-4 text-xs font-semibold text-gray-500 uppercase tracking-wider mb-2\">\n                  Administración\n                </p>\n                {adminNavigation.map((item) => {\n                  const Icon = item.icon;\n                  return (\n                    <Link key={item.name} href={item.href}>\n                      <a className={cn(\n                        \"flex items-center space-x-3 px-4 py-3 rounded-xl transition-colors\",\n                        location === item.href \n                          ? \"bg-primary text-white\" \n                          : \"text-gray-700 hover:bg-gray-100\"\n                      )} data-testid={`nav-admin-${item.href}`}>\n                        <Icon className=\"h-5 w-5\" />\n                        <span className=\"font-medium\">{item.name}</span>\n                      </a>\n                    </Link>\n                  );\n                })}\n              </div>\n            )}\n          </nav>\n        </aside>\n\n        {/* Main Content */}\n        <main className=\"flex-1 p-6\">\n          {children}\n        </main>\n      </div>\n\n      {/* Sidebar Overlay */}\n      {sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20 lg:hidden\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":6308},"client/src/components/StatsCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  subtitle?: string;\n  icon: LucideIcon;\n  iconColor: string;\n  valueColor?: string;\n}\n\nexport default function StatsCard({ \n  title, \n  value, \n  subtitle, \n  icon: Icon, \n  iconColor, \n  valueColor = \"text-gray-900\" \n}: StatsCardProps) {\n  return (\n    <Card data-testid={`stats-card-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-gray-600 text-sm font-medium\">{title}</p>\n            <p className={`text-3xl font-bold mt-2 ${valueColor}`}>\n              {value}\n            </p>\n            {subtitle && (\n              <p className=\"text-sm mt-1 text-gray-600\">\n                {subtitle}\n              </p>\n            )}\n          </div>\n          <div className={`w-12 h-12 ${iconColor} rounded-xl flex items-center justify-center`}>\n            <Icon className=\"text-xl\" />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1169},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.tsx":{"content":"import { useState, useEffect, createContext, useContext, ReactNode } from \"react\";\nimport { \n  User as FirebaseUser, \n  signInWithEmailAndPassword, \n  createUserWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged \n} from \"firebase/auth\";\nimport { auth } from \"@/lib/firebase\";\nimport { User } from \"@shared/schema\";\n\ninterface AuthContextType {\n  user: FirebaseUser | null;\n  userData: User | null;\n  loading: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (userData: any) => Promise<void>;\n  logout: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<FirebaseUser | null>(null);\n  const [userData, setUserData] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      setUser(firebaseUser);\n      if (firebaseUser) {\n        // Fetch user data from our API\n        try {\n          const response = await fetch(`/api/users/profile/${firebaseUser.uid}`);\n          if (response.ok) {\n            const userData = await response.json();\n            setUserData(userData);\n          }\n        } catch (error) {\n          console.error(\"Failed to fetch user data:\", error);\n        }\n      } else {\n        setUserData(null);\n      }\n      setLoading(false);\n    });\n\n    return unsubscribe;\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    await signInWithEmailAndPassword(auth, email, password);\n  };\n\n  const register = async (userData: any) => {\n    const userCredential = await createUserWithEmailAndPassword(auth, userData.email, userData.password);\n    \n    // Create user in our database\n    await fetch('/api/users', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        ...userData,\n        firebaseUid: userCredential.user.uid,\n      }),\n    });\n  };\n\n  const logout = async () => {\n    await signOut(auth);\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, userData, loading, login, register, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2448},"client/src/hooks/useFirestore.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { \n  collection, \n  query, \n  where, \n  orderBy, \n  onSnapshot, \n  addDoc, \n  updateDoc, \n  deleteDoc, \n  doc,\n  Timestamp \n} from \"firebase/firestore\";\nimport { db } from \"@/lib/firebase\";\nimport { useAuth } from \"./useAuth\";\n\nexport function useFirestoreCollection(collectionName: string, constraints?: any[]) {\n  const [data, setData] = useState<any[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    let q = collection(db, collectionName);\n    \n    if (constraints && constraints.length > 0) {\n      q = query(q, ...constraints) as any;\n    }\n\n    const unsubscribe = onSnapshot(\n      q,\n      (snapshot) => {\n        const docs = snapshot.docs.map(doc => ({\n          id: doc.id,\n          ...doc.data(),\n          // Convert Firestore timestamps to dates\n          createdAt: doc.data().createdAt?.toDate?.() || doc.data().createdAt,\n          updatedAt: doc.data().updatedAt?.toDate?.() || doc.data().updatedAt,\n        }));\n        setData(docs);\n        setLoading(false);\n      },\n      (err) => {\n        setError(err.message);\n        setLoading(false);\n      }\n    );\n\n    return unsubscribe;\n  }, [collectionName, JSON.stringify(constraints)]);\n\n  return { data, loading, error };\n}\n\nexport function useUserDocuments() {\n  const { userData } = useAuth();\n  return useFirestoreCollection(\n    'documents', \n    userData ? [where('userId', '==', userData.id), orderBy('uploadedAt', 'desc')] : []\n  );\n}\n\nexport function useUserDeadlines() {\n  const { userData } = useAuth();\n  const globalDeadlines = useFirestoreCollection(\n    'deadlines',\n    [where('isGlobal', '==', true), orderBy('dueDate', 'asc')]\n  );\n  \n  const userDeadlines = useFirestoreCollection(\n    'deadlines',\n    userData ? [where('userId', '==', userData.id), orderBy('dueDate', 'asc')] : []\n  );\n\n  return {\n    data: [...globalDeadlines.data, ...userDeadlines.data],\n    loading: globalDeadlines.loading || userDeadlines.loading,\n    error: globalDeadlines.error || userDeadlines.error\n  };\n}\n\nexport function useUserNotifications() {\n  const { userData } = useAuth();\n  return useFirestoreCollection(\n    'notifications',\n    userData ? [where('userId', '==', userData.id), orderBy('sentAt', 'desc')] : []\n  );\n}\n","size_bytes":2340},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\nimport { getFirestore } from \"firebase/firestore\";\nimport { getStorage } from \"firebase/storage\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY,\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID,\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID,\n};\n\nconst app = initializeApp(firebaseConfig);\n\nexport const auth = getAuth(app);\nexport const db = getFirestore(app);\nexport const storage = getStorage(app);\nexport default app;\n","size_bytes":702},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport StatsCard from \"@/components/StatsCard\";\nimport { Users, FileText, PieChart, AlertTriangle, Download, Eye, Bell } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\nexport default function AdminDashboard() {\n  const { data: adminStats } = useQuery({\n    queryKey: ['/api/admin/stats'],\n  });\n\n  const { data: departmentCompliance } = useQuery({\n    queryKey: ['/api/admin/compliance-by-department'],\n  });\n\n  const { data: documentTypes } = useQuery({\n    queryKey: ['/api/admin/document-types'],\n  });\n\n  const { data: users } = useQuery({\n    queryKey: ['/api/admin/users-status'],\n  });\n\n  const handleExportReport = () => {\n    // TODO: Implement export functionality\n    window.open('/api/admin/export/compliance-report', '_blank');\n  };\n\n  const handleSendReminder = (userId: string) => {\n    // TODO: Implement send reminder\n    console.log(`Sending reminder to user ${userId}`);\n  };\n\n  const handleViewUserDetails = (userId: string) => {\n    // TODO: Navigate to user detail view\n    console.log(`Viewing details for user ${userId}`);\n  };\n\n  const getComplianceColor = (percentage: number) => {\n    if (percentage >= 90) return 'bg-green-500';\n    if (percentage >= 75) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'complete':\n        return 'bg-green-100 text-green-700';\n      case 'incomplete':\n        return 'bg-orange-100 text-orange-700';\n      case 'overdue':\n        return 'bg-red-100 text-red-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'complete':\n        return 'Completo';\n      case 'incomplete':\n        return 'Incompleto';\n      case 'overdue':\n        return 'Vencido';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div data-testid=\"admin-dashboard-page\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Panel de Administración</h2>\n        <p className=\"text-gray-600\">Estadísticas y métricas de cumplimiento del sistema</p>\n      </div>\n\n      {/* Admin Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <StatsCard\n          title=\"Total Usuarios\"\n          value={adminStats?.totalUsers || 0}\n          subtitle={`+${adminStats?.newUsersThisMonth || 0} este mes`}\n          icon={Users}\n          iconColor=\"bg-blue-100\"\n        />\n        <StatsCard\n          title=\"Documentos Totales\"\n          value={adminStats?.totalDocuments || 0}\n          subtitle={`+${adminStats?.newDocumentsThisWeek || 0} esta semana`}\n          icon={FileText}\n          iconColor=\"bg-green-100\"\n        />\n        <StatsCard\n          title=\"Cumplimiento Global\"\n          value={adminStats?.compliance ? `${adminStats.compliance}%` : '0%'}\n          subtitle={`${adminStats?.complianceChange || 0}% vs mes anterior`}\n          icon={PieChart}\n          iconColor=\"bg-purple-100\"\n        />\n        <StatsCard\n          title=\"Documentos Vencidos\"\n          value={adminStats?.overdue || 0}\n          subtitle=\"Requieren acción\"\n          icon={AlertTriangle}\n          iconColor=\"bg-red-100\"\n          valueColor=\"text-red-600\"\n        />\n      </div>\n\n      {/* Charts & Analytics */}\n      <div className=\"grid lg:grid-cols-2 gap-6 mb-8\">\n        {/* Compliance Chart */}\n        <Card data-testid=\"compliance-chart-card\">\n          <CardHeader>\n            <CardTitle>Cumplimiento por Departamento</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {departmentCompliance && departmentCompliance.length > 0 ? (\n              <div className=\"space-y-4\">\n                {departmentCompliance.map((dept: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-gray-700\">\n                      {dept.name}\n                    </span>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                        <div\n                          className={`h-2 rounded-full ${getComplianceColor(dept.percentage)}`}\n                          style={{ width: `${dept.percentage}%` }}\n                        />\n                      </div>\n                      <span className=\"text-sm font-medium text-gray-900 w-12 text-right\">\n                        {dept.percentage}%\n                      </span>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-4\">\n                <p className=\"text-gray-500\">No hay datos de cumplimiento disponibles</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Document Types */}\n        <Card data-testid=\"document-types-card\">\n          <CardHeader>\n            <CardTitle>Tipos de Documentos Más Solicitados</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {documentTypes && documentTypes.length > 0 ? (\n              <div className=\"space-y-4\">\n                {documentTypes.map((type: any, index: number) => (\n                  <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-xl\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                        <FileText className=\"text-blue-600 h-4 w-4\" />\n                      </div>\n                      <span className=\"font-medium text-gray-900\">\n                        {type.name}\n                      </span>\n                    </div>\n                    <span className=\"text-gray-600 font-medium\">\n                      {type.count}\n                    </span>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-4\">\n                <p className=\"text-gray-500\">No hay datos de tipos de documentos disponibles</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* User Status Table */}\n      <Card data-testid=\"user-status-table-card\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Estado de Usuarios</CardTitle>\n            <Button onClick={handleExportReport} data-testid=\"export-report\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Exportar Reporte\n            </Button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          {users && users.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"border-b border-gray-200\">\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Usuario</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Departamento</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Documentos</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Estado</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Última Actividad</th>\n                    <th className=\"text-left py-3 px-4 font-medium text-gray-900\">Acciones</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {users.map((user: any) => (\n                    <tr key={user.id} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                      <td className=\"py-4 px-4\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-8 h-8 bg-gradient-to-r from-primary to-secondary rounded-full flex items-center justify-center\">\n                            <span className=\"text-white text-xs font-medium\">\n                              {user.firstName[0]}{user.lastName[0]}\n                            </span>\n                          </div>\n                          <div>\n                            <p className=\"font-medium text-gray-900\">\n                              {user.firstName} {user.lastName}\n                            </p>\n                            <p className=\"text-sm text-gray-600\">\n                              {user.email}\n                            </p>\n                          </div>\n                        </div>\n                      </td>\n                      <td className=\"py-4 px-4 text-gray-600\">\n                        {user.department}\n                      </td>\n                      <td className=\"py-4 px-4\">\n                        <span className=\"text-sm font-medium text-gray-900\">\n                          {user.documentsUploaded}/{user.documentsRequired}\n                        </span>\n                      </td>\n                      <td className=\"py-4 px-4\">\n                        <Badge className={`text-xs ${getStatusColor(user.status)}`}>\n                          {getStatusText(user.status)}\n                        </Badge>\n                      </td>\n                      <td className=\"py-4 px-4 text-sm text-gray-600\">\n                        {user.lastActivity ? format(new Date(user.lastActivity), \"dd MMM, HH:mm\", { locale: es }) : 'Nunca'}\n                      </td>\n                      <td className=\"py-4 px-4\">\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleSendReminder(user.id)}\n                            data-testid={`send-reminder-${user.id}`}\n                          >\n                            <Bell className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleViewUserDetails(user.id)}\n                            data-testid={`view-user-${user.id}`}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Users className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">No hay usuarios disponibles</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":11172},"client/src/pages/Dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport StatsCard from \"@/components/StatsCard\";\nimport { CheckCircle, Clock, AlertTriangle, PieChart, Upload, Camera, Bell } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { format } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\nexport default function Dashboard() {\n  const { userData } = useAuth();\n\n  const { data: stats } = useQuery({\n    queryKey: ['/api/users/stats', userData?.id],\n    enabled: !!userData,\n  });\n\n  const { data: recentActivity } = useQuery({\n    queryKey: ['/api/users/activity', userData?.id],\n    enabled: !!userData,\n  });\n\n  const { data: upcomingDeadlines } = useQuery({\n    queryKey: ['/api/deadlines/upcoming', userData?.id],\n    enabled: !!userData,\n  });\n\n  const getActivityIcon = (type: string) => {\n    switch (type) {\n      case 'upload':\n        return <Upload className=\"text-green-600 text-sm\" />;\n      case 'camera':\n        return <Camera className=\"text-blue-600 text-sm\" />;\n      case 'reminder':\n        return <Bell className=\"text-orange-600 text-sm\" />;\n      default:\n        return <CheckCircle className=\"text-green-600 text-sm\" />;\n    }\n  };\n\n  const getUrgencyColor = (daysLeft: number) => {\n    if (daysLeft <= 1) return 'bg-red-100 text-red-700 border-red-200';\n    if (daysLeft <= 5) return 'bg-orange-100 text-orange-700 border-orange-200';\n    return 'bg-yellow-100 text-yellow-700 border-yellow-200';\n  };\n\n  const getUrgencyText = (daysLeft: number) => {\n    if (daysLeft <= 0) return 'Vencido';\n    if (daysLeft === 1) return '1 día';\n    if (daysLeft <= 5) return `${daysLeft} días`;\n    return `${daysLeft} días`;\n  };\n\n  return (\n    <div data-testid=\"dashboard-page\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">\n          Bienvenido, {userData?.firstName || 'Usuario'}\n        </h2>\n        <p className=\"text-gray-600\">\n          Aquí tienes un resumen de tu actividad y próximas fechas límite\n        </p>\n      </div>\n\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <StatsCard\n          title=\"Documentos Subidos\"\n          value={stats?.uploaded || 0}\n          icon={CheckCircle}\n          iconColor=\"bg-green-100\"\n        />\n        <StatsCard\n          title=\"Pendientes\"\n          value={stats?.pending || 0}\n          icon={Clock}\n          iconColor=\"bg-orange-100\"\n          valueColor=\"text-orange-600\"\n        />\n        <StatsCard\n          title=\"Próximas Fechas\"\n          value={stats?.upcoming || 0}\n          icon={AlertTriangle}\n          iconColor=\"bg-red-100\"\n          valueColor=\"text-red-600\"\n        />\n        <StatsCard\n          title=\"Tasa de Cumplimiento\"\n          value={stats?.compliance ? `${stats.compliance}%` : '0%'}\n          icon={PieChart}\n          iconColor=\"bg-blue-100\"\n          valueColor=\"text-primary\"\n        />\n      </div>\n\n      {/* Recent Activity & Upcoming Deadlines */}\n      <div className=\"grid lg:grid-cols-2 gap-6\">\n        {/* Recent Activity */}\n        <Card data-testid=\"recent-activity-card\">\n          <CardHeader>\n            <CardTitle>Actividad Reciente</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {recentActivity && recentActivity.length > 0 ? (\n              <div className=\"space-y-4\">\n                {recentActivity.map((activity: any, index: number) => (\n                  <div key={index} className=\"flex items-start space-x-4 p-4 bg-gray-50 rounded-xl\">\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                      {getActivityIcon(activity.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        {activity.title}\n                      </p>\n                      <p className=\"text-xs text-gray-600 mt-1\">\n                        {format(new Date(activity.createdAt), \"dd MMM yyyy, HH:mm\", { locale: es })}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">No hay actividad reciente</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Upcoming Deadlines */}\n        <Card data-testid=\"upcoming-deadlines-card\">\n          <CardHeader>\n            <CardTitle>Próximas Fechas Límite</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {upcomingDeadlines && upcomingDeadlines.length > 0 ? (\n              <div className=\"space-y-4\">\n                {upcomingDeadlines.map((deadline: any) => {\n                  const dueDate = new Date(deadline.dueDate);\n                  const now = new Date();\n                  const daysLeft = Math.ceil((dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n                  \n                  return (\n                    <div \n                      key={deadline.id} \n                      className={`border rounded-xl p-4 ${getUrgencyColor(daysLeft)}`}\n                    >\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-medium text-gray-900\">\n                          {deadline.title}\n                        </h4>\n                        <Badge className=\"text-xs\">\n                          {getUrgencyText(daysLeft)}\n                        </Badge>\n                      </div>\n                      <p className=\"text-sm text-gray-600 mb-3\">\n                        {deadline.description}\n                      </p>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs font-medium\">\n                          Vence: {format(dueDate, \"dd MMM yyyy\", { locale: es })}\n                        </span>\n                        <Button size=\"sm\" data-testid=\"upload-now-button\">\n                          Subir Ahora\n                        </Button>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            ) : (\n              <div className=\"text-center py-8\">\n                <p className=\"text-gray-500\">No hay fechas límite próximas</p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6732},"client/src/pages/Deadlines.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, Clock, AlertTriangle } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { format } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\nexport default function Deadlines() {\n  const { userData } = useAuth();\n\n  const { data: deadlines = [] } = useQuery({\n    queryKey: ['/api/deadlines', userData?.id],\n    enabled: !!userData,\n  });\n\n  const getUrgencyLevel = (dueDate: string) => {\n    const due = new Date(dueDate);\n    const now = new Date();\n    const daysLeft = Math.ceil((due.getTime() - now.getTime()) / (1000 * 60 * 60 * 24));\n    \n    if (daysLeft < 0) return { level: 'overdue', color: 'bg-red-100 text-red-700 border-red-200', text: 'Vencido' };\n    if (daysLeft === 0) return { level: 'today', color: 'bg-red-100 text-red-700 border-red-200', text: 'Hoy' };\n    if (daysLeft === 1) return { level: 'tomorrow', color: 'bg-red-100 text-red-700 border-red-200', text: '1 día' };\n    if (daysLeft <= 5) return { level: 'urgent', color: 'bg-orange-100 text-orange-700 border-orange-200', text: `${daysLeft} días` };\n    if (daysLeft <= 15) return { level: 'soon', color: 'bg-yellow-100 text-yellow-700 border-yellow-200', text: `${daysLeft} días` };\n    return { level: 'future', color: 'bg-blue-100 text-blue-700 border-blue-200', text: `${daysLeft} días` };\n  };\n\n  const groupedDeadlines = deadlines.reduce((acc: any, deadline: any) => {\n    const urgency = getUrgencyLevel(deadline.dueDate);\n    if (!acc[urgency.level]) {\n      acc[urgency.level] = [];\n    }\n    acc[urgency.level].push({ ...deadline, urgency });\n    return acc;\n  }, {});\n\n  const sectionOrder = ['overdue', 'today', 'tomorrow', 'urgent', 'soon', 'future'];\n  const sectionTitles = {\n    overdue: 'Vencidos',\n    today: 'Vencen Hoy',\n    tomorrow: 'Vencen Mañana', \n    urgent: 'Próximos (1-5 días)',\n    soon: 'Pronto (6-15 días)',\n    future: 'Futuro (15+ días)'\n  };\n\n  return (\n    <div data-testid=\"deadlines-page\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Fechas Límite</h2>\n        <p className=\"text-gray-600\">Gestiona las fechas límite de todos tus documentos</p>\n      </div>\n\n      {deadlines.length === 0 ? (\n        <Card className=\"p-8\">\n          <div className=\"text-center\">\n            <Calendar className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-500 mb-4\">No tienes fechas límite pendientes</p>\n            <p className=\"text-sm text-gray-400\">Las fechas límite aparecerán aquí cuando se asignen</p>\n          </div>\n        </Card>\n      ) : (\n        <div className=\"space-y-8\">\n          {sectionOrder.map((section) => {\n            const sectionDeadlines = groupedDeadlines[section];\n            if (!sectionDeadlines?.length) return null;\n\n            return (\n              <div key={section} data-testid={`deadline-section-${section}`}>\n                <div className=\"flex items-center space-x-2 mb-4\">\n                  {section === 'overdue' || section === 'today' || section === 'tomorrow' ? (\n                    <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                  ) : section === 'urgent' ? (\n                    <Clock className=\"h-5 w-5 text-orange-600\" />\n                  ) : (\n                    <Calendar className=\"h-5 w-5 text-blue-600\" />\n                  )}\n                  <h3 className=\"text-xl font-bold text-gray-900\">\n                    {sectionTitles[section as keyof typeof sectionTitles]}\n                  </h3>\n                  <Badge variant=\"outline\">{sectionDeadlines.length}</Badge>\n                </div>\n\n                <div className=\"grid gap-4 md:grid-cols-2\">\n                  {sectionDeadlines.map((deadline: any) => (\n                    <Card \n                      key={deadline.id} \n                      className={`border ${deadline.urgency.color}`}\n                      data-testid={`deadline-card-${deadline.id}`}\n                    >\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <h4 className=\"font-medium text-gray-900\">\n                            {deadline.title}\n                          </h4>\n                          <Badge className=\"text-xs\">\n                            {deadline.urgency.text}\n                          </Badge>\n                        </div>\n                        \n                        {deadline.description && (\n                          <p className=\"text-sm text-gray-600 mb-3\">\n                            {deadline.description}\n                          </p>\n                        )}\n                        \n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-xs font-medium\">\n                            Vence: {format(new Date(deadline.dueDate), \"dd MMM yyyy\", { locale: es })}\n                          </span>\n                          <Button \n                            size=\"sm\"\n                            data-testid={`upload-for-deadline-${deadline.id}`}\n                          >\n                            Subir Documento\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":5689},"client/src/pages/Documents.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport DocumentCard from \"@/components/DocumentCard\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport default function Documents() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [dateFilter, setDateFilter] = useState(\"\");\n  \n  const { userData } = useAuth();\n  const { toast } = useToast();\n\n  const { data: documents = [], refetch } = useQuery({\n    queryKey: ['/api/documents', userData?.id, searchQuery, typeFilter, statusFilter, dateFilter],\n    enabled: !!userData,\n  });\n\n  const handleDeleteDocument = async (documentId: string) => {\n    try {\n      const response = await fetch(`/api/documents/${documentId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to delete document');\n      }\n\n      toast({\n        title: \"Documento eliminado\",\n        description: \"El documento se ha eliminado correctamente.\",\n      });\n\n      refetch();\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    }\n  };\n\n  const filteredDocuments = documents.filter((doc: any) => {\n    const matchesSearch = searchQuery === \"\" || \n      doc.originalName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      doc.documentType.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesType = typeFilter === \"all\" || doc.documentType === typeFilter;\n    const matchesStatus = statusFilter === \"all\" || doc.status === statusFilter;\n    \n    const matchesDate = dateFilter === \"\" || \n      new Date(doc.uploadedAt).toISOString().split('T')[0] === dateFilter;\n\n    return matchesSearch && matchesType && matchesStatus && matchesDate;\n  });\n\n  return (\n    <div data-testid=\"documents-page\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Mis Documentos</h2>\n        <p className=\"text-gray-600\">Administra todos tus documentos subidos</p>\n      </div>\n\n      {/* Filter & Search */}\n      <Card className=\"p-6 mb-6\">\n        <CardContent className=\"p-0\">\n          <div className=\"grid md:grid-cols-4 gap-4\">\n            <div>\n              <Input\n                type=\"text\"\n                placeholder=\"Buscar documentos...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                data-testid=\"search-documents\"\n              />\n            </div>\n            <div>\n              <Select value={typeFilter} onValueChange={setTypeFilter}>\n                <SelectTrigger data-testid=\"filter-type\">\n                  <SelectValue placeholder=\"Todos los tipos\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos los tipos</SelectItem>\n                  <SelectItem value=\"identification\">Identificación</SelectItem>\n                  <SelectItem value=\"address_proof\">Comprobantes</SelectItem>\n                  <SelectItem value=\"education_certificate\">Certificados</SelectItem>\n                  <SelectItem value=\"work_contract\">Contratos</SelectItem>\n                  <SelectItem value=\"rfc\">RFC</SelectItem>\n                  <SelectItem value=\"curp\">CURP</SelectItem>\n                  <SelectItem value=\"other\">Otros</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger data-testid=\"filter-status\">\n                  <SelectValue placeholder=\"Todos los estados\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">Todos los estados</SelectItem>\n                  <SelectItem value=\"processed\">Procesado</SelectItem>\n                  <SelectItem value=\"pending\">Pendiente</SelectItem>\n                  <SelectItem value=\"rejected\">Rechazado</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            <div>\n              <Input\n                type=\"date\"\n                value={dateFilter}\n                onChange={(e) => setDateFilter(e.target.value)}\n                data-testid=\"filter-date\"\n              />\n            </div>\n          </div>\n          {(searchQuery || typeFilter !== \"all\" || statusFilter !== \"all\" || dateFilter) && (\n            <div className=\"mt-4 flex justify-end\">\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setSearchQuery(\"\");\n                  setTypeFilter(\"all\");\n                  setStatusFilter(\"all\");\n                  setDateFilter(\"\");\n                }}\n                data-testid=\"clear-filters\"\n              >\n                Limpiar Filtros\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Documents Grid */}\n      {filteredDocuments.length > 0 ? (\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\" data-testid=\"documents-grid\">\n          {filteredDocuments.map((document: any) => (\n            <DocumentCard\n              key={document.id}\n              document={document}\n              onDelete={handleDeleteDocument}\n            />\n          ))}\n        </div>\n      ) : (\n        <Card className=\"p-8\">\n          <div className=\"text-center\">\n            <p className=\"text-gray-500 mb-4\">\n              {documents.length === 0 \n                ? \"No tienes documentos subidos aún\" \n                : \"No se encontraron documentos con los filtros aplicados\"\n              }\n            </p>\n            {documents.length === 0 && (\n              <Button data-testid=\"go-to-upload\">\n                Subir mi primer documento\n              </Button>\n            )}\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":6313},"client/src/pages/Notifications.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Label } from \"@/components/ui/label\";\nimport { Bell, Mail, MessageSquare, Check, Trash2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\nexport default function Notifications() {\n  const { userData } = useAuth();\n  const { toast } = useToast();\n  \n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [smsNotifications, setSmsNotifications] = useState(false);\n  const [pushNotifications, setPushNotifications] = useState(true);\n  const [reminderDays, setReminderDays] = useState(3);\n\n  const { data: notifications = [] } = useQuery({\n    queryKey: ['/api/notifications', userData?.id],\n    enabled: !!userData,\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await fetch(`/api/notifications/${notificationId}/read`, {\n        method: 'PATCH',\n      });\n      if (!response.ok) throw new Error('Failed to mark as read');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n    },\n  });\n\n  const deleteNotificationMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      const response = await fetch(`/api/notifications/${notificationId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete notification');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/notifications'] });\n      toast({ title: \"Notificación eliminada\" });\n    },\n  });\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (settings: any) => {\n      const response = await fetch('/api/users/notification-settings', {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(settings),\n      });\n      if (!response.ok) throw new Error('Failed to update settings');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Configuración actualizada\" });\n    },\n  });\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case 'reminder':\n        return <Bell className=\"h-4 w-4 text-orange-600\" />;\n      case 'deadline':\n        return <Bell className=\"h-4 w-4 text-red-600\" />;\n      case 'upload_success':\n        return <Check className=\"h-4 w-4 text-green-600\" />;\n      default:\n        return <Bell className=\"h-4 w-4 text-blue-600\" />;\n    }\n  };\n\n  const handleMarkAsRead = (notificationId: string) => {\n    markAsReadMutation.mutate(notificationId);\n  };\n\n  const handleDeleteNotification = (notificationId: string) => {\n    deleteNotificationMutation.mutate(notificationId);\n  };\n\n  const handleUpdateSettings = () => {\n    updateSettingsMutation.mutate({\n      emailNotifications,\n      smsNotifications,\n      pushNotifications,\n      reminderDays,\n    });\n  };\n\n  const unreadCount = notifications.filter((n: any) => !n.isRead).length;\n\n  return (\n    <div data-testid=\"notifications-page\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Notificaciones</h2>\n        <p className=\"text-gray-600\">Gestiona tus notificaciones y preferencias</p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-8\">\n        {/* Notification Settings */}\n        <div className=\"lg:col-span-1\">\n          <Card data-testid=\"notification-settings-card\">\n            <CardHeader>\n              <CardTitle>Configuración</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"email-notifications\" className=\"flex items-center space-x-2\">\n                    <Mail className=\"h-4 w-4\" />\n                    <span>Email</span>\n                  </Label>\n                  <Switch\n                    id=\"email-notifications\"\n                    checked={emailNotifications}\n                    onCheckedChange={setEmailNotifications}\n                    data-testid=\"switch-email\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"sms-notifications\" className=\"flex items-center space-x-2\">\n                    <MessageSquare className=\"h-4 w-4\" />\n                    <span>SMS</span>\n                  </Label>\n                  <Switch\n                    id=\"sms-notifications\"\n                    checked={smsNotifications}\n                    onCheckedChange={setSmsNotifications}\n                    data-testid=\"switch-sms\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <Label htmlFor=\"push-notifications\" className=\"flex items-center space-x-2\">\n                    <Bell className=\"h-4 w-4\" />\n                    <span>Push</span>\n                  </Label>\n                  <Switch\n                    id=\"push-notifications\"\n                    checked={pushNotifications}\n                    onCheckedChange={setPushNotifications}\n                    data-testid=\"switch-push\"\n                  />\n                </div>\n              </div>\n\n              <div>\n                <Label>Recordatorios (días antes del vencimiento)</Label>\n                <select\n                  value={reminderDays}\n                  onChange={(e) => setReminderDays(Number(e.target.value))}\n                  className=\"w-full mt-2 p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent\"\n                  data-testid=\"select-reminder-days\"\n                >\n                  <option value={1}>1 día</option>\n                  <option value={3}>3 días</option>\n                  <option value={5}>5 días</option>\n                  <option value={7}>7 días</option>\n                </select>\n              </div>\n\n              <Button \n                onClick={handleUpdateSettings}\n                className=\"w-full\"\n                disabled={updateSettingsMutation.isPending}\n                data-testid=\"save-settings\"\n              >\n                {updateSettingsMutation.isPending ? \"Guardando...\" : \"Guardar Configuración\"}\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Notifications List */}\n        <div className=\"lg:col-span-2\">\n          <Card data-testid=\"notifications-list-card\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle>\n                  Mis Notificaciones\n                  {unreadCount > 0 && (\n                    <Badge className=\"ml-2\">{unreadCount} sin leer</Badge>\n                  )}\n                </CardTitle>\n                {notifications.length > 0 && (\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => notifications.forEach((n: any) => !n.isRead && handleMarkAsRead(n.id))}\n                    data-testid=\"mark-all-read\"\n                  >\n                    Marcar todas como leídas\n                  </Button>\n                )}\n              </div>\n            </CardHeader>\n            <CardContent>\n              {notifications.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Bell className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">No tienes notificaciones</p>\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {notifications.map((notification: any) => (\n                    <div\n                      key={notification.id}\n                      className={`p-4 rounded-xl border ${\n                        notification.isRead ? 'bg-white' : 'bg-blue-50 border-blue-200'\n                      }`}\n                      data-testid={`notification-${notification.id}`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start space-x-3 flex-1\">\n                          <div className=\"flex-shrink-0 mt-1\">\n                            {getNotificationIcon(notification.type)}\n                          </div>\n                          <div className=\"flex-1 min-w-0\">\n                            <h4 className=\"font-medium text-gray-900\">\n                              {notification.title}\n                            </h4>\n                            <p className=\"text-sm text-gray-600 mt-1\">\n                              {notification.message}\n                            </p>\n                            <p className=\"text-xs text-gray-500 mt-2\">\n                              {format(new Date(notification.sentAt), \"dd MMM yyyy, HH:mm\", { locale: es })}\n                            </p>\n                          </div>\n                        </div>\n                        \n                        <div className=\"flex items-center space-x-2 flex-shrink-0\">\n                          {!notification.isRead && (\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => handleMarkAsRead(notification.id)}\n                              data-testid={`mark-read-${notification.id}`}\n                            >\n                              <Check className=\"h-4 w-4\" />\n                            </Button>\n                          )}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDeleteNotification(notification.id)}\n                            className=\"text-red-600 hover:text-red-700\"\n                            data-testid={`delete-${notification.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10853},"client/src/pages/Reminders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Clock, Plus, Edit, Trash2, Send, Calendar, Mail, MessageSquare, Bell } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\nexport default function Reminders() {\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingReminder, setEditingReminder] = useState<any>(null);\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    title: \"\",\n    description: \"\",\n    documentType: \"\",\n    dueDate: \"\",\n    reminderDays: 3,\n    reminderTypes: {\n      email: true,\n      sms: false,\n      push: true\n    },\n    isGlobal: true,\n    targetUsers: [] as string[]\n  });\n\n  const { data: reminders = [] } = useQuery({\n    queryKey: ['/api/admin/reminders'],\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: ['/api/admin/users'],\n  });\n\n  const { data: documentTypes = [] } = useQuery({\n    queryKey: ['/api/admin/document-types'],\n  });\n\n  const createReminderMutation = useMutation({\n    mutationFn: async (reminderData: any) => {\n      const response = await fetch('/api/admin/reminders', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(reminderData),\n      });\n      if (!response.ok) throw new Error('Failed to create reminder');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/reminders'] });\n      toast({ title: \"Recordatorio creado exitosamente\" });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error al crear recordatorio\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  const updateReminderMutation = useMutation({\n    mutationFn: async ({ id, ...reminderData }: any) => {\n      const response = await fetch(`/api/admin/reminders/${id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(reminderData),\n      });\n      if (!response.ok) throw new Error('Failed to update reminder');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/reminders'] });\n      toast({ title: \"Recordatorio actualizado exitosamente\" });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n  });\n\n  const deleteReminderMutation = useMutation({\n    mutationFn: async (reminderId: string) => {\n      const response = await fetch(`/api/admin/reminders/${reminderId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete reminder');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/reminders'] });\n      toast({ title: \"Recordatorio eliminado exitosamente\" });\n    },\n  });\n\n  const sendReminderMutation = useMutation({\n    mutationFn: async (reminderId: string) => {\n      const response = await fetch(`/api/admin/reminders/${reminderId}/send`, {\n        method: 'POST',\n      });\n      if (!response.ok) throw new Error('Failed to send reminder');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"Recordatorio enviado exitosamente\" });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      title: \"\",\n      description: \"\",\n      documentType: \"\",\n      dueDate: \"\",\n      reminderDays: 3,\n      reminderTypes: {\n        email: true,\n        sms: false,\n        push: true\n      },\n      isGlobal: true,\n      targetUsers: []\n    });\n    setEditingReminder(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingReminder) {\n      updateReminderMutation.mutate({ id: editingReminder.id, ...formData });\n    } else {\n      createReminderMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (reminder: any) => {\n    setEditingReminder(reminder);\n    setFormData({\n      title: reminder.title,\n      description: reminder.description || \"\",\n      documentType: reminder.documentType,\n      dueDate: format(new Date(reminder.dueDate), \"yyyy-MM-dd\"),\n      reminderDays: reminder.reminderDays || 3,\n      reminderTypes: reminder.reminderTypes || { email: true, sms: false, push: true },\n      isGlobal: reminder.isGlobal,\n      targetUsers: reminder.targetUsers || []\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (reminderId: string) => {\n    if (window.confirm('¿Estás seguro de que quieres eliminar este recordatorio?')) {\n      deleteReminderMutation.mutate(reminderId);\n    }\n  };\n\n  const handleSendReminder = (reminderId: string) => {\n    sendReminderMutation.mutate(reminderId);\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'bg-green-100 text-green-700';\n      case 'scheduled':\n        return 'bg-blue-100 text-blue-700';\n      case 'sent':\n        return 'bg-gray-100 text-gray-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'active':\n        return 'Activo';\n      case 'scheduled':\n        return 'Programado';\n      case 'sent':\n        return 'Enviado';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div data-testid=\"reminders-page\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Sistema de Recordatorios</h2>\n        <p className=\"text-gray-600\">Configura recordatorios automáticos para fechas límite de documentos</p>\n      </div>\n\n      {/* Create Reminder Button */}\n      <div className=\"mb-6\">\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button onClick={() => resetForm()} data-testid=\"create-reminder-button\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Crear Recordatorio\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\" data-testid=\"reminder-dialog\">\n            <DialogHeader>\n              <DialogTitle>\n                {editingReminder ? 'Editar Recordatorio' : 'Nuevo Recordatorio'}\n              </DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleSubmit} className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"title\">Título del Recordatorio</Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({...formData, title: e.target.value})}\n                    placeholder=\"Ej: Subir comprobante de domicilio\"\n                    required\n                    data-testid=\"input-title\"\n                  />\n                </div>\n\n                <div className=\"col-span-2\">\n                  <Label htmlFor=\"description\">Descripción</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({...formData, description: e.target.value})}\n                    placeholder=\"Descripción detallada del documento requerido...\"\n                    data-testid=\"textarea-description\"\n                  />\n                </div>\n\n                <div>\n                  <Label>Tipo de Documento</Label>\n                  <Select \n                    value={formData.documentType} \n                    onValueChange={(value) => setFormData({...formData, documentType: value})}\n                  >\n                    <SelectTrigger data-testid=\"select-document-type\">\n                      <SelectValue placeholder=\"Seleccionar tipo\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"identification\">Identificación Oficial</SelectItem>\n                      <SelectItem value=\"address_proof\">Comprobante de Domicilio</SelectItem>\n                      <SelectItem value=\"education_certificate\">Certificado de Estudios</SelectItem>\n                      <SelectItem value=\"work_contract\">Contrato de Trabajo</SelectItem>\n                      <SelectItem value=\"rfc\">RFC</SelectItem>\n                      <SelectItem value=\"curp\">CURP</SelectItem>\n                      <SelectItem value=\"other\">Otros</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"dueDate\">Fecha Límite</Label>\n                  <Input\n                    id=\"dueDate\"\n                    type=\"date\"\n                    value={formData.dueDate}\n                    onChange={(e) => setFormData({...formData, dueDate: e.target.value})}\n                    required\n                    data-testid=\"input-due-date\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"reminderDays\">Días de Anticipación</Label>\n                  <Select \n                    value={formData.reminderDays.toString()} \n                    onValueChange={(value) => setFormData({...formData, reminderDays: parseInt(value)})}\n                  >\n                    <SelectTrigger data-testid=\"select-reminder-days\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"1\">1 día</SelectItem>\n                      <SelectItem value=\"3\">3 días</SelectItem>\n                      <SelectItem value=\"5\">5 días</SelectItem>\n                      <SelectItem value=\"7\">7 días</SelectItem>\n                      <SelectItem value=\"15\">15 días</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label>Alcance</Label>\n                  <div className=\"flex items-center space-x-2 mt-2\">\n                    <Switch\n                      checked={formData.isGlobal}\n                      onCheckedChange={(checked) => setFormData({...formData, isGlobal: checked})}\n                      data-testid=\"switch-global\"\n                    />\n                    <span className=\"text-sm\">\n                      {formData.isGlobal ? 'Todos los usuarios' : 'Usuarios específicos'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Reminder Types */}\n              <div>\n                <Label>Tipos de Notificación</Label>\n                <div className=\"grid grid-cols-3 gap-4 mt-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      checked={formData.reminderTypes.email}\n                      onCheckedChange={(checked) => setFormData({\n                        ...formData, \n                        reminderTypes: {...formData.reminderTypes, email: checked}\n                      })}\n                      data-testid=\"switch-email\"\n                    />\n                    <Mail className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">Email</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      checked={formData.reminderTypes.sms}\n                      onCheckedChange={(checked) => setFormData({\n                        ...formData, \n                        reminderTypes: {...formData.reminderTypes, sms: checked}\n                      })}\n                      data-testid=\"switch-sms\"\n                    />\n                    <MessageSquare className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">SMS</span>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Switch\n                      checked={formData.reminderTypes.push}\n                      onCheckedChange={(checked) => setFormData({\n                        ...formData, \n                        reminderTypes: {...formData.reminderTypes, push: checked}\n                      })}\n                      data-testid=\"switch-push\"\n                    />\n                    <Bell className=\"h-4 w-4\" />\n                    <span className=\"text-sm\">Push</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"flex justify-end space-x-2\">\n                <Button \n                  type=\"button\" \n                  variant=\"outline\" \n                  onClick={() => setIsDialogOpen(false)}\n                  data-testid=\"cancel-button\"\n                >\n                  Cancelar\n                </Button>\n                <Button \n                  type=\"submit\" \n                  disabled={createReminderMutation.isPending || updateReminderMutation.isPending}\n                  data-testid=\"save-reminder-button\"\n                >\n                  {createReminderMutation.isPending || updateReminderMutation.isPending \n                    ? \"Guardando...\" \n                    : editingReminder ? \"Actualizar\" : \"Crear Recordatorio\"\n                  }\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Reminders Grid */}\n      {reminders.length > 0 ? (\n        <div className=\"grid gap-6\" data-testid=\"reminders-grid\">\n          {reminders.map((reminder: any) => (\n            <Card key={reminder.id} data-testid={`reminder-card-${reminder.id}`}>\n              <CardHeader>\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <CardTitle className=\"text-lg\">{reminder.title}</CardTitle>\n                    <div className=\"flex items-center space-x-4 mt-2\">\n                      <Badge className={`text-xs ${getStatusColor(reminder.status)}`}>\n                        {getStatusText(reminder.status)}\n                      </Badge>\n                      <span className=\"text-sm text-gray-600 flex items-center\">\n                        <Calendar className=\"h-4 w-4 mr-1\" />\n                        Vence: {format(new Date(reminder.dueDate), \"dd MMM yyyy\", { locale: es })}\n                      </span>\n                      <span className=\"text-sm text-gray-600 flex items-center\">\n                        <Clock className=\"h-4 w-4 mr-1\" />\n                        {reminder.reminderDays} días antes\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleSendReminder(reminder.id)}\n                      disabled={sendReminderMutation.isPending}\n                      data-testid={`send-reminder-${reminder.id}`}\n                    >\n                      <Send className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleEdit(reminder)}\n                      data-testid={`edit-reminder-${reminder.id}`}\n                    >\n                      <Edit className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => handleDelete(reminder.id)}\n                      className=\"text-red-600 hover:text-red-700\"\n                      data-testid={`delete-reminder-${reminder.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                {reminder.description && (\n                  <p className=\"text-gray-600 mb-4\">{reminder.description}</p>\n                )}\n                \n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"font-medium\">Tipo de documento:</span>\n                    <br />\n                    <span className=\"text-gray-600\">{reminder.documentType}</span>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Alcance:</span>\n                    <br />\n                    <span className=\"text-gray-600\">\n                      {reminder.isGlobal ? 'Todos los usuarios' : `${reminder.targetUsers?.length || 0} usuarios específicos`}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Métodos de notificación:</span>\n                    <br />\n                    <div className=\"flex space-x-2 mt-1\">\n                      {reminder.reminderTypes?.email && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          <Mail className=\"h-3 w-3 mr-1\" />Email\n                        </Badge>\n                      )}\n                      {reminder.reminderTypes?.sms && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          <MessageSquare className=\"h-3 w-3 mr-1\" />SMS\n                        </Badge>\n                      )}\n                      {reminder.reminderTypes?.push && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          <Bell className=\"h-3 w-3 mr-1\" />Push\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Creado:</span>\n                    <br />\n                    <span className=\"text-gray-600\">\n                      {format(new Date(reminder.createdAt), \"dd MMM yyyy\", { locale: es })}\n                    </span>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card className=\"p-8\">\n          <div className=\"text-center\">\n            <Clock className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-500 mb-4\">No hay recordatorios configurados</p>\n            <p className=\"text-sm text-gray-400\">Crea tu primer recordatorio para automatizar las notificaciones</p>\n          </div>\n        </Card>\n      )}\n    </div>\n  );\n}\n","size_bytes":19267},"client/src/pages/Upload.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport FileUpload from \"@/components/FileUpload\";\nimport CameraCapture from \"@/components/CameraCapture\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { FileText, Image, Video, Download, Trash2 } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { format } from \"date-fns\";\nimport { es } from \"date-fns/locale\";\n\nexport default function Upload() {\n  const { userData } = useAuth();\n\n  const { data: recentUploads, refetch } = useQuery({\n    queryKey: ['/api/documents/recent', userData?.id],\n    enabled: !!userData,\n  });\n\n  const getFileIcon = (fileType: string) => {\n    switch (fileType) {\n      case 'pdf':\n        return <FileText className=\"text-red-600 h-5 w-5\" />;\n      case 'image':\n        return <Image className=\"text-green-600 h-5 w-5\" />;\n      case 'video':\n        return <Video className=\"text-blue-600 h-5 w-5\" />;\n      default:\n        return <FileText className=\"text-gray-600 h-5 w-5\" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'processed':\n        return 'bg-green-100 text-green-700';\n      case 'pending':\n        return 'bg-orange-100 text-orange-700';\n      case 'rejected':\n        return 'bg-red-100 text-red-700';\n      default:\n        return 'bg-gray-100 text-gray-700';\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case 'processed':\n        return 'Procesado';\n      case 'pending':\n        return 'Pendiente';\n      case 'rejected':\n        return 'Rechazado';\n      default:\n        return status;\n    }\n  };\n\n  return (\n    <div data-testid=\"upload-page\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Subir Archivos</h2>\n        <p className=\"text-gray-600\">\n          Arrastra y suelta tus archivos o usa la cámara para capturar documentos\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-2 gap-8\">\n        {/* File Upload Area */}\n        <FileUpload />\n\n        {/* Camera Capture */}\n        <CameraCapture />\n      </div>\n\n      {/* Recent Uploads */}\n      <Card className=\"mt-8\" data-testid=\"recent-uploads-card\">\n        <CardHeader>\n          <CardTitle>Archivos Subidos Recientemente</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {recentUploads && recentUploads.length > 0 ? (\n            <div className=\"space-y-4\">\n              {recentUploads.map((upload: any) => (\n                <div key={upload.id} className=\"flex items-center justify-between p-4 bg-gray-50 rounded-xl\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-10 h-10 bg-red-100 rounded-lg flex items-center justify-center\">\n                      {getFileIcon(upload.fileType)}\n                    </div>\n                    <div>\n                      <p className=\"font-medium text-gray-900\">\n                        {upload.originalName}\n                      </p>\n                      <p className=\"text-sm text-gray-600\">\n                        {format(new Date(upload.uploadedAt), \"dd MMM yyyy, HH:mm\", { locale: es })} • {(upload.fileSize / (1024 * 1024)).toFixed(1)} MB\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge className={`text-xs ${getStatusColor(upload.status)}`}>\n                      {getStatusText(upload.status)}\n                    </Badge>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => window.open(upload.storageUrl, '_blank')}\n                      data-testid={`download-${upload.id}`}\n                    >\n                      <Download className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"text-red-600 hover:text-red-700\"\n                      data-testid={`delete-${upload.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <p className=\"text-gray-500\">No hay archivos subidos recientemente</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4639},"client/src/pages/UserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Users, Plus, Edit, Trash2, Mail, Phone } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport default function UserManagement() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [departmentFilter, setDepartmentFilter] = useState(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<any>(null);\n  const { toast } = useToast();\n\n  const [formData, setFormData] = useState({\n    firstName: \"\",\n    lastName: \"\",\n    email: \"\",\n    phone: \"\",\n    department: \"\",\n    role: \"user\"\n  });\n\n  const { data: users = [] } = useQuery({\n    queryKey: ['/api/admin/users', searchQuery, departmentFilter],\n  });\n\n  const { data: departments = [] } = useQuery({\n    queryKey: ['/api/admin/departments'],\n  });\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: any) => {\n      const response = await fetch('/api/admin/users', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userData),\n      });\n      if (!response.ok) throw new Error('Failed to create user');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      toast({ title: \"Usuario creado exitosamente\" });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error al crear usuario\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({ id, ...userData }: any) => {\n      const response = await fetch(`/api/admin/users/${id}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(userData),\n      });\n      if (!response.ok) throw new Error('Failed to update user');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      toast({ title: \"Usuario actualizado exitosamente\" });\n      setIsDialogOpen(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error al actualizar usuario\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const response = await fetch(`/api/admin/users/${userId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) throw new Error('Failed to delete user');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/users'] });\n      toast({ title: \"Usuario eliminado exitosamente\" });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error al eliminar usuario\",\n        description: error.message,\n        variant: \"destructive\"\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setFormData({\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      phone: \"\",\n      department: \"\",\n      role: \"user\"\n    });\n    setEditingUser(null);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (editingUser) {\n      updateUserMutation.mutate({ id: editingUser.id, ...formData });\n    } else {\n      createUserMutation.mutate(formData);\n    }\n  };\n\n  const handleEdit = (user: any) => {\n    setEditingUser(user);\n    setFormData({\n      firstName: user.firstName,\n      lastName: user.lastName,\n      email: user.email,\n      phone: user.phone || \"\",\n      department: user.department,\n      role: user.role\n    });\n    setIsDialogOpen(true);\n  };\n\n  const handleDelete = (userId: string) => {\n    if (window.confirm('¿Estás seguro de que quieres eliminar este usuario?')) {\n      deleteUserMutation.mutate(userId);\n    }\n  };\n\n  const filteredUsers = users.filter((user: any) => {\n    const matchesSearch = searchQuery === \"\" || \n      `${user.firstName} ${user.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesDepartment = departmentFilter === \"all\" || user.department === departmentFilter;\n    \n    return matchesSearch && matchesDepartment;\n  });\n\n  const getRoleColor = (role: string) => {\n    return role === 'admin' ? 'bg-purple-100 text-purple-700' : 'bg-blue-100 text-blue-700';\n  };\n\n  return (\n    <div data-testid=\"user-management-page\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-3xl font-bold text-gray-900 mb-2\">Gestión de Usuarios</h2>\n        <p className=\"text-gray-600\">Administra usuarios y sus permisos</p>\n      </div>\n\n      {/* Filters and Actions */}\n      <Card className=\"p-6 mb-6\">\n        <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n          <div className=\"flex flex-col md:flex-row gap-4\">\n            <Input\n              placeholder=\"Buscar usuarios...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"md:w-64\"\n              data-testid=\"search-users\"\n            />\n            <Select value={departmentFilter} onValueChange={setDepartmentFilter}>\n              <SelectTrigger className=\"md:w-48\" data-testid=\"filter-department\">\n                <SelectValue placeholder=\"Filtrar por departamento\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">Todos los departamentos</SelectItem>\n                {departments.map((dept: string) => (\n                  <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => resetForm()} data-testid=\"add-user-button\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Agregar Usuario\n              </Button>\n            </DialogTrigger>\n            <DialogContent data-testid=\"user-dialog\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingUser ? 'Editar Usuario' : 'Nuevo Usuario'}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"firstName\">Nombre</Label>\n                    <Input\n                      id=\"firstName\"\n                      value={formData.firstName}\n                      onChange={(e) => setFormData({...formData, firstName: e.target.value})}\n                      required\n                      data-testid=\"input-firstName\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lastName\">Apellido</Label>\n                    <Input\n                      id=\"lastName\"\n                      value={formData.lastName}\n                      onChange={(e) => setFormData({...formData, lastName: e.target.value})}\n                      required\n                      data-testid=\"input-lastName\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={formData.email}\n                    onChange={(e) => setFormData({...formData, email: e.target.value})}\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"phone\">Teléfono</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={formData.phone}\n                    onChange={(e) => setFormData({...formData, phone: e.target.value})}\n                    data-testid=\"input-phone\"\n                  />\n                </div>\n                \n                <div>\n                  <Label>Departamento</Label>\n                  <Select \n                    value={formData.department} \n                    onValueChange={(value) => setFormData({...formData, department: value})}\n                  >\n                    <SelectTrigger data-testid=\"select-department\">\n                      <SelectValue placeholder=\"Seleccionar departamento\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {departments.map((dept: string) => (\n                        <SelectItem key={dept} value={dept}>{dept}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label>Rol</Label>\n                  <Select \n                    value={formData.role} \n                    onValueChange={(value) => setFormData({...formData, role: value})}\n                  >\n                    <SelectTrigger data-testid=\"select-role\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"user\">Usuario</SelectItem>\n                      <SelectItem value=\"admin\">Administrador</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex justify-end space-x-2\">\n                  <Button \n                    type=\"button\" \n                    variant=\"outline\" \n                    onClick={() => setIsDialogOpen(false)}\n                    data-testid=\"cancel-button\"\n                  >\n                    Cancelar\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createUserMutation.isPending || updateUserMutation.isPending}\n                    data-testid=\"save-user-button\"\n                  >\n                    {createUserMutation.isPending || updateUserMutation.isPending \n                      ? \"Guardando...\" \n                      : editingUser ? \"Actualizar\" : \"Crear Usuario\"\n                    }\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </Card>\n\n      {/* Users Table */}\n      <Card data-testid=\"users-table-card\">\n        <CardHeader>\n          <CardTitle>\n            Usuarios ({filteredUsers.length})\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          {filteredUsers.length > 0 ? (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Usuario</TableHead>\n                    <TableHead>Departamento</TableHead>\n                    <TableHead>Rol</TableHead>\n                    <TableHead>Contacto</TableHead>\n                    <TableHead>Documentos</TableHead>\n                    <TableHead>Acciones</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredUsers.map((user: any) => (\n                    <TableRow key={user.id} data-testid={`user-row-${user.id}`}>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-3\">\n                          <Avatar>\n                            <AvatarFallback>\n                              {user.firstName[0]}{user.lastName[0]}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <p className=\"font-medium\">\n                              {user.firstName} {user.lastName}\n                            </p>\n                            <p className=\"text-sm text-gray-600\">\n                              {user.email}\n                            </p>\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{user.department}</TableCell>\n                      <TableCell>\n                        <Badge className={`text-xs ${getRoleColor(user.role)}`}>\n                          {user.role === 'admin' ? 'Administrador' : 'Usuario'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"space-y-1\">\n                          <div className=\"flex items-center text-sm text-gray-600\">\n                            <Mail className=\"h-3 w-3 mr-1\" />\n                            {user.email}\n                          </div>\n                          {user.phone && (\n                            <div className=\"flex items-center text-sm text-gray-600\">\n                              <Phone className=\"h-3 w-3 mr-1\" />\n                              {user.phone}\n                            </div>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <span className=\"text-sm\">\n                          {user.documentsCount || 0} subidos\n                        </span>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleEdit(user)}\n                            data-testid={`edit-user-${user.id}`}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => handleDelete(user.id)}\n                            className=\"text-red-600 hover:text-red-700\"\n                            data-testid={`delete-user-${user.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Users className=\"h-16 w-16 text-gray-400 mx-auto mb-4\" />\n              <p className=\"text-gray-500\">\n                {users.length === 0 \n                  ? \"No hay usuarios registrados\" \n                  : \"No se encontraron usuarios con los filtros aplicados\"\n                }\n              </p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":15788},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}